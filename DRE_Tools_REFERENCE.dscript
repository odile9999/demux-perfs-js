///////////////////////////////////////////////////////////////// FONCTIONS ///////////////////////////////////////////////////////////////////////
/*
    DRE_tools Javascript custom librarie
    ================

    Developped by: A. Clenet

    Project: Athena X-IFU / DRE-DEMUX

    This library contains functions to control the DRE-DEMUX and to use Python 

    Routine listing
    ===============
    onAbortScript()
	DRE_General_CMD()
	Channel_CMD()
	DRE_Pixel_CMD()
	DRE_Test_Pixel_CMD()
	Clear_All()
	DRE_Startup()
	DRE_Stop()
	ScanFeedback()
	sendConfigFromFile()
	PythonTempAddress()
	Launch_Python_Shell()
	Python_TempFile_exec()
	exec_Python_CMD()
	Move_to_Local()

*/

include("F:/Shared/04_GSE_XIFU-STUDIO/00_SCRIPTS/FPA_Tools.dscript")

/////////////////////// Constants ///////////////////////

const FS	= 19.53e6
const Npix	= 40
const WAITING_TIME = 1;
const dir_Python = "C:/ProgramData/Miniconda3/python.exe";
const source_LINUX = "//ATHENA-GSE/christophe/test_pciex/TestPcieUDP/ramdiskUDP/"
const source_XIFUSTUDIO = "C:/Xifustudio/"
const TARGET = 0	 // FPA_simulator = 0; SQUID_emulator = 1;	
const Select_Input = 0		

///////////////// Hardawre parameters ////////////////////
// SPI
const SPI_write_ON  = 1*Math.pow(2,5)
const SPI_write_OFF = 0*Math.pow(2,5)
// CDCM7005
const CDCM7005_SPI_ch = 4*Math.pow(2,0)
//const CDCM7005_SPI_Word0 =



//---------------------------------------------------------------------------------------------------------------------------------------
function onAbortScript()
// This function is called when clicking on the "Abort" button
// It is used to abort the setup in a proper way
{
	sendStopDumpedDataBackup()
	sendStopDREChannels(3)
	print("'onAbortScript' function executed correctly")
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_General_CMD(Target_ID,Firmware_ID,Start_Sending_TM,Select_TM,Start_Sending_HK,Select_HK) 
// 6 inputs
{
	const TargetID_l			= Math.pow(2,25);
	const FirmwareID_l			= Math.pow(2,18);
	const Start_Sending_TM_l	= Math.pow(2,7);
	const Select_TM_l			= Math.pow(2,3);
	const Start_Sending_HK_l	= Math.pow(2,2);
	const Select_HK_l			= Math.pow(2,0);
	
	var address = 0;
	var value = Target_ID*TargetID_l + Firmware_ID*FirmwareID_l + Start_Sending_TM*Start_Sending_TM_l + Select_TM*Select_TM_l + Start_Sending_HK*Start_Sending_HK_l + Select_HK*Select_HK_l;
	sendConfigureDREOneRegister(address,value)
	waitMs(WAITING_TIME)
	// print("0x"+address.toString(16))
	// print("0x"+value.toString(16))
	waitMs(10)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Channel_CMD(Channel_id,Loop_Control,StartStop,ADC_ON,DACB_ON,DACF_ON,Select_Input,Bias_Enabled,Feedback_Enabled,Bias_Slope_Speed,Bias_Truncation,Feedback_Truncation,Compensation_Gain,Feedback_Reverse)
// 14 inputs
{
	const Loop_Control_l			= Math.pow(2,28);
	const StartStop_l				= Math.pow(2,16);
	const ADC_ON_l					= Math.pow(2,12);
	const DACB_ON_l					= Math.pow(2,11);
	const DACF_ON_l					= Math.pow(2,10);
	const Select_Input_l			= Math.pow(2,8);
	const Bias_Enabled_l			= Math.pow(2,7);
	const Feedback_Enabled_l		= Math.pow(2,6);
	const Bias_Slope_Speed_l		= Math.pow(2,4);
	const Bias_Truncation_l			= Math.pow(2,2);
	const Feedback_Truncation_l		= Math.pow(2,0);
	
	const Compensation_Gain_l		= Math.pow(2,16);
	const Feedback_Reverse_l		= Math.pow(2,15);

	var address_offset 	= 1+Channel_id*(2+2*Npix+4);
	var address_Ch_1 	= address_offset+0;
	var value_Ch_1 		= Loop_Control*Loop_Control_l + StartStop*StartStop_l + ADC_ON*ADC_ON_l + DACB_ON*DACB_ON_l + DACF_ON*DACF_ON_l + Select_Input*Select_Input_l + Bias_Enabled*Bias_Enabled_l + Feedback_Enabled*Feedback_Enabled_l + Bias_Slope_Speed*Bias_Slope_Speed_l + Bias_Truncation*Bias_Truncation_l + Feedback_Truncation*Feedback_Truncation_l;
	var address_Ch_2 	= address_offset+1;
	var value_Ch_2 		= Compensation_Gain*Compensation_Gain_l + Feedback_Reverse*Feedback_Reverse_l;
	sendConfigureDREOneRegister(address_Ch_1,value_Ch_1)
	waitMs(WAITING_TIME)
	sendConfigureDREOneRegister(address_Ch_2,value_Ch_2)
	waitMs(WAITING_TIME)
	// print("0x"+address_Ch_1.toString(16))
	// print("0x"+value_Ch_1.toString(16))
	// print("0x"+address_Ch_2.toString(16))
	// print("0x"+value_Ch_2.toString(16))	
	waitMs(10)
}


//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_Pixel_CMD(Pixel_ID,PHI_Delay,PHI_Rotate,Gain_BBFB,Bias_Amplitude,Increment,PHI_Initial) // Pixel_ID is defined from 1 to 40 
// 7 inputs
{
	const PHI_Delay_l				= Math.pow(2,24);
	const PHI_Rotate_l			= Math.pow(2,16);
	const Gain_BBFB_l				= Math.pow(2,8);
	const Bias_Amplitude_l		= Math.pow(2,0);
	const Increment_l				= Math.pow(2,12);
	const PHI_Initial_l			= Math.pow(2,0);

	var address_offset 	= 3+(Pixel_ID-1)*2;
	var address_PX_1 	= address_offset+0;
	var value_PX_1 		= PHI_Delay*PHI_Delay_l + PHI_Rotate*PHI_Rotate_l + Gain_BBFB*Gain_BBFB_l + Bias_Amplitude*Bias_Amplitude_l;
	var address_PX_2 	= address_offset+1;
	var value_PX_2 		= Increment*Increment_l + PHI_Initial*PHI_Initial_l;
	sendConfigureDREOneRegister(address_PX_1,value_PX_1)
	//waitMs(WAITING_TIME)
	sendConfigureDREOneRegister(address_PX_2,value_PX_2)
	//waitMs(WAITING_TIME)
	//print("0x"+address_PX_1.toString(16))
	print("0x"+value_PX_1.toString(16))
	//print("0x"+address_PX_2.toString(16))
	print("0x"+value_PX_2.toString(16))
	//waitMs(10)	
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_Test_Pixel_CMD(Test_PHI_Delay,Test_PHI_Rotate,Test_PHI_Initial,Test_Gain_BBFB,Test_Bias_Amplitude,Test_Increment,Test_Bias_Modulation_Increment,Test_Bias_Modulation_Amplitude,SW2,SW1)
//10 inputs
{
	const Test_PHI_Delay_l					= Math.pow(2,24);
	const Test_PHI_Rotate_l					= Math.pow(2,16);
	const Test_PHI_Initial_l				= Math.pow(2,0);
	const Test_Gain_BBFB_l					= Math.pow(2,8);
	const Test_Bias_Amplitude_l				= Math.pow(2,0);
	const Test_Increment_l					= Math.pow(2,12);
	const Test_Bias_Modulation_Increment_l	= Math.pow(2,0);
	const Test_Bias_Modulation_Amplitude_l	= Math.pow(2,0);
	const SW2_l								= Math.pow(2,9);
	const SW1_l								= Math.pow(2,8);
	
	var address_offset 	= 3+Npix*2;
	var address_TP_1 	= address_offset+0;
	var value_TP_1 		= Test_PHI_Delay*Test_PHI_Delay_l + Test_PHI_Rotate*Test_PHI_Rotate_l + Test_Gain_BBFB*Test_Gain_BBFB_l + Test_Bias_Amplitude*Test_Bias_Amplitude_l;
	var address_TP_2 	= address_offset+1;
	var value_TP_2 		= Test_Increment*Test_Increment_l + Test_PHI_Initial*Test_PHI_Initial_l;
	var address_TP_3 	= address_offset+2;
	var value_TP_3 		= Test_Bias_Modulation_Increment*Test_Bias_Modulation_Increment_l;
	var address_TP_4 	= address_offset+3;
	var value_TP_4 		= SW2*SW2_l + SW1*SW1_l + Test_Bias_Modulation_Amplitude*Test_Bias_Modulation_Amplitude_l;
	sendConfigureDREOneRegister(address_TP_1,value_TP_1)
	//print("0x"+value_TP_1.toString(16))
	sendConfigureDREOneRegister(address_TP_2,value_TP_2)
	//print("0x"+value_TP_2.toString(16))
	sendConfigureDREOneRegister(address_TP_3,value_TP_3)
	//print("0x"+value_TP_3.toString(16))
	sendConfigureDREOneRegister(address_TP_4,value_TP_4)
	//print("0x"+value_TP_4.toString(16))
	//waitMs(10)
}

function SendPulse(Pulse_timescale, Pulse_Amplitude, Send_Pulse)
{
	const Pulse_timescale_l					= Math.pow(2,20);
	const Pulse_Amplitude_l					= Math.pow(2,12);
	const Send_Pulse_l						= Math.pow(2,11);
	
	var address_offset 	= 3+Npix*2;
	var address 	= address_offset+3;
	var value 		= Pulse_timescale*Pulse_timescale_l + Pulse_Amplitude*Pulse_Amplitude_l + Send_Pulse*Send_Pulse_l;		// SW2, SW1 and Test_Bias_Modulation_Amplitude are not configured and hence are set to "0"
	sendConfigureDREOneRegister(address,value)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_resetAll()
// reset all DRE-DELUX parameters
{
	print("Clearing all registers..")
	DRE_General_CMD(0,0,0,0,0,0)
	Channel_CMD(0,0,0,0,0,0,0,0,0,0,0,0,0)
	Reset_AllConfig()
	Send_All(0)
	DRE_Test_Pixel_CMD(0,0,0,0,0,0,0,0,0,0)
	SendPulse(0,0,0)
	waitMs(10)
}

function DRE_RESET_CONFIG_CDCM()
// only resets and configures the CDCM7005 
{
	///// config_cdcm19p53MHz
	print("Config_CDCM_19.53MHz ..")
	sendConfigureDREOneRegister(0xAD,0x4)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x0028A060)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x24)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x4)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x0008803D)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x24)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x4)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0xDA05B0A2)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x24)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x4)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00000027)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x24)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x4)
	waitMs(10)
}

function DRE_RESET_DAC_AD9726()
{
	///// AD9726 Reset
	print("Config_AD9726..")
	sendConfigureDREOneRegister(0xAD,0x20000000)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
}

function DRE_CONFIG_DACS_AD9726()
{
	///// AD9726_BIAS
	print("AD9726_BIAS..")
	sendConfigureDREOneRegister(0xAE,0x00000000)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x20)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00000260)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x20)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00000E00)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x20)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00000F00)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x20)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00001640)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x20)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	
	///// AD9726_FEEDBACK
	print("AD9726_FEEDBACK..")
	sendConfigureDREOneRegister(0xAE,0x00000000)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x21)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00000260)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x21)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00000E00)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x21)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00000F00)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x21)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00001640)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x21)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
}

function DRE_RESET_MMCM()
{
	///// FPGA MMCM Reset
	print("FPGA MMCM Reset..")
	sendConfigureDREOneRegister(0xAD,0x80000000)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x00000000)
	waitMs(10)
}

function DRE_CLK_SELECT()
{
	///// CLOCK SELECT ON THE CLK provided by the DACF(ch1)
	print("CLK SWITCHED TO DACF (ch0)...")
	sendConfigureDREOneRegister(0xAD,0x40000000)
	waitMs(10)
}

function DRE_ADC1_DFSB(val)
{
	///// Sets DFSB=1 (ADC signed/unsigned)
	sendConfigureDREOneRegister(0xAD,(0x40000000+val*Math.pow(2,24)))//0x41000000
}


//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_Startup()
// sequence required to startup the DRE-DEMUX
{
	DRE_resetAll()
	waitMs(100)
	DRE_RESET_CONFIG_CDCM()
	waitMs(100)
	DRE_RESET_DAC_AD9726()
	waitMs(100)
	DRE_CONFIG_DACS_AD9726()
	waitMs(100)
	DRE_RESET_MMCM()
	waitMs(100)
	DRE_CLK_SELECT()
	waitMs(100)
	DRE_ADC1_DFSB(0)
	waitMs(100)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_Stop()
// stop all channels and clear all paramaters
{
	sendStopDREChannels(3)
	DRE_resetAll()	
}

//---------------------------------------------------------------------------------------------------------------------------------------
function ScanFeedback(start,stop,step,Select_Input)
// execute a scan-feedback of the DRE-DEMUX
{	

	sendStopDREChannels(3)

	////////Set the General_Configuration --> Select_TM
	DRE_General_CMD(
		0,				//Target_ID
		0,				//Firmware_ID
		0,				//Start_Sending_TM
		9,				//Select_TM --> Channel 0 - Testpixel - I;Q @ Fs
		0,				//Start_Sending_HK
		0 				//Select_HK
	)

	 ////////Set the Channel_Configuration in Scan-Feedback mode
	Channel_CMD(
					0,											//Loop_Control
					0,											//StartStop (don't touch, always STOP)
					1,											//ADC_ON
					0,											//DACB_ON
					1,											//DACF_ON
					Select_Input,								//Select_Input
					0,											//Bias_Enabled
					1,											//Feedback_Enabled
					0,											//Bias_Slope_Speed
					0,											//Bias_Truncation
					0,											//Feedback_Truncation
					32767,										//Compensation_Gain (32767 => unitary gain)
					TARGET										//Feedback_Reverse
	)
	
	 ////////Start the Scan-Feedback
	print("Starting Scan-Feedback..")
	//sendStopDREChannels(3)
	for(var i = 0;i <= parseInt((stop-start)/step); i++){
		var freq = i*step+start
		var filename = (("000000" +(i).toString()).slice(-6)) + "_" + (freq).toString() + "Hz_ScanFeedback.dat"
		DRE_Test_Pixel_CMD(
							Math.round(0*Math.pow(2,8)/360),				// Test_PHI_Delay (degree)
							Math.round(0*Math.pow(2,8)/360),				// Test_PHI_Rotate (degree)
							Math.round(0*Math.pow(2,12)/360),				// Test_PHI_Initial (degree)
							0,												// Test_Gain_BBFB
							0,												// Test_Bias_Amplitude
							Math.round(freq*Math.pow(2,20)/FS),	// Test_Frequency (Hz)
							Math.round(0*Math.pow(2,24)/FS),				// Test_Bias_Modulation_Frequency (Hz)
							0,												// Test_Bias_Modulation_Amplitude (necessarily lower than "Test_Bias_Amplitude")
							1,												// SW2
							1												// SW1
		)
		sendStartDREChannels(3)
		sendStopDREDaqAcquisition()							// To ensure that buffers are empty
		waitMs(1)
		sendStartDREDaqAcquisition(9)
		sendStartDumpedDataBackup2Filename(20,filename,"")					// Generate a dump file of 10 ms
		sendStopDumpedDataBackup()
		print((freq).toString()+" Hz")
		//sendStopDREChannels(3)
	}
	sendStopDREDaqAcquisition()
	sendStopDREChannels(3)
	DRE_Test_Pixel_CMD(
					Math.round(0*Math.pow(2,8)/360),				// Test_PHI_Delay (degree)
					Math.round(0*Math.pow(2,8)/360),				// Test_PHI_Rotate (degree)
					Math.round(0*Math.pow(2,12)/360),				// Test_PHI_Initial (degree)
					0,												// Test_Gain_BBFB
					0,												// Test_Bias_Amplitude
					Math.round(0*Math.pow(2,20)/FS),	// Test_Frequency (Hz)
					Math.round(0*Math.pow(2,24)/FS),				// Test_Bias_Modulation_Frequency (Hz)
					0,												// Test_Bias_Modulation_Amplitude (necessarily lower than "Test_Bias_Amplitude")
					0,												// SW2
					0												// SW1
	)
}

//----------------------------------------------------------------------------------------------------------------------------
function Simulta_40_Freq_Scan(CenterFreqTab,Span,Step,Amp,i_start){
	var i = i_start
	var Freq_List = ""
	
	
	Channel_CMD(
						0,											//Loop_Control
						0,											//StartStop (don't touch, always STOP)
						1,											//ADC_ON
						1,											//DACB_ON
						1,											//DACF_ON
						0,											//Select_Input
						1,											//Bias_Enabled
						1,											//Feedback_Enabled
						2,											//Bias_Slope_Speed
						3,											//Bias_Truncation
						2,											//Feedback_Truncation
						32767,									//Compensation_Gain (32767 => unitary gain)
						TARGET									//Feedback_Reverse
	)
	for(var k=0;k<Math.round(Span/Step);k++){
		Freq_List = ""
		for(var n=0;n<CenterFreqTab.length;n++){
				var Freq = CenterFreqTab[n] - Span/2 + k*Step
				var FreqMHz = Freq/1.0e6
				var PhiC = Number(FitCoef[0])+Number(FitCoef[1])*Math.pow(FreqMHz,1)+Number(FitCoef[2])*Math.pow(FreqMHz,2)+Number(FitCoef[3])*Math.pow(FreqMHz,3)+Number(FitCoef[4])*Math.pow(FreqMHz,4)+Number(FitCoef[5])*Math.pow(FreqMHz,5)
				var PhiCdeg = Math.round(-PhiC*180/Math.PI + 180)													// apply the Antoine's relation defined in eq. (6.8) in page 158 of the Bible
				if(PhiCdeg >= 360) PhiCdeg = PhiCdeg-(360*parseInt(Math.abs(PhiCdeg)/360))			// wrap PhiC in the range [0-360]
				if(PhiCdeg <= -360) PhiCdeg = PhiCdeg+(360*parseInt(1+Math.abs(PhiCdeg)/360))	// wrap PhiC in the range [0-360]

				var PhiIdeg = (Math.PI*n*n/Npix)*180/Math.PI														// apply the Schroeder's relation defined in eq (6.10) in page 163 of the Bible
				if(PhiIdeg >= 360) PhiIdeg = PhiIdeg-(360*parseInt(PhiIdeg/360))							// wrap PhiI in the range [0-360]
				
					
				// DRE_Pixel_CMD(
								// n+1,																			// Pixel_ID --> +1 because the BBFB is "0" indexed for the moment
								// Math.round((PhiCdeg+0)*Math.pow(2,8)/360),				// PHI_Delay (degree)
								// Math.round(0*Math.pow(2,8)/360),								// Test_PHI_Rotate (degree)
								// 255,																			// Gain_BBFB
								// Amp,																			// Bias_Amplitude
								// Math.round(Freq*Math.pow(2,20)/FS),						// Increment
								// Math.round(PhiIdeg*Math.pow(2,12)/360)					// Test_PHI_Initial (degree)
				// )
				Freq_List = Freq_List + Math.round(Freq).toString() +"\n"
		}
		//print(Freq_List)
		
		sendStartDREChannels(3)
		waitMs(100)
		if(k==0) waitMs(1000) // Wait for ramp-up
		////// Dump Info file ///////
		switchToFileContext(1)
		clearFileContent()
		addToFile(Freq_List)
		saveFileContent("C:/Xifustudio/Dump_Info_file.dumpinfo")
		
		var filename = (("000000" +(i).toString()).slice(-6))+ "_" + (Amp).toString()+ "AMP_" + "_40Pix-Simultaneous-FPA-freq-scan.dat"
		sendStopDREDaqAcquisition()							// To ensure that buffers are empty
		waitMs(2)
		sendStartDREDaqAcquisition(8) // Mode IQ 40 Pixels
		waitMs(2)
		sendStartDumpedDataBackup2Filename(500,filename,filename)
		print(filename)
		// sendStartDREChannels(3)
		// waitMs(100)
		sendStopDumpedDataBackup()
		i+=1
	}
}


function ScanVPhi(){
		FPA_Test_BBFB_CMD(
		0,					// Test_PHI_Initial
		1,					// BBFBStartStop
		1,					// SW1
		2,					// SW2
		0,					// Test_Gain_BBFB
		0,					// Test_Bias_Amplitude
		0,					// Test_Increment
		0					// Test_PHI_Delay
	) 
	for(var k=0;k<255;k++){
		FPA_General_CMD(
			SQUID_EN,			// SQ_EN
			k,					// SQ_Offset
			0,					// SQ_Gain
			0,					// Truncation
			0					// Mode
		)
		var filename = (("000" +(k).toString()).slice(-3)) + "_FPAVPHIscan.dat"
		sendStartDumpedDataBackup2Filename(10,filename,filename)
		waitMs(10)
	}
	alert("Pensez a mettre le bon Flux_Offset")
	FPA_Test_BBFB_CMD(
		0,					// Test_PHI_Initial
		0,					// BBFBStartStop
		0,					// SW1
		0,					// SW2
		0,					// Test_Gain_BBFB
		0,					// Test_Bias_Amplitude
		0,					// Test_Increment
		0					// Test_PHI_Delay
	)
	/////////////// Recover the FPA nominal state /////////////////////
	FPA_General_CMD(
		SQUID_EN,			// SQ_EN
		SQUID_OFFSET,		// SQ_Offset
		SQUID_GAIN,			// SQ_Gain
		FPA_Truncation,		// Truncation
		FPA_Mode			// Mode
	)
}

function ScanGBW(bias_Amp,BBFB_gain,central_freq){			// Scan GBW using the Test_pixel BIAS modulation in the channel configuration defined externally of this function
	const MOD_FREQ 		=   
/*    [      10,        20,        30,        40,        50,        60,        70,        80,        90,
          100,       114,       129,       147,       167,       190,       215,       245,       278,
          316,       359,       408,       464,       527,       599,       681,       774,       880,
         1000,      1136,      1292,      1468,      1668,      1896,      2154,      2448,      2783,
         3162,      3594,      4084,      4642,      5275,      5995,      6813,      7743,      8799,
        10000,     11365,     12915,     14678,     16681,     18957,     21544,     24484,     27826,
        31623,     35938,     40842,     46416,     52750,     59948,     68129,     77426,     87992,
       100000,    113646,    129155,    146780,    166810,    189574,    215443,    244844,    278256,
       316228,    359381,    408424,    464159,    527500,    599484,    681292,    774264,    879923,
    ]*/
    [      10,        30,        50,        70,        90,
          114,       147,       190,       245,       316,       408,       527,      681,       880,      1136,      1468,      1896,      2448,
         3162,      4084,      5275,      6813,      7743,      8799,
        10000,     11365,     12915,     14678,     16681,     18957,     21544,     24484,     27826,
        31623,     35938,     40842,     52750,     68129,     87992,
       113646,    146780,    189574,    244844,
       316228,    408424,    527500,    681292,    879923,
    ]
	const N_PERIOD		= 20 

	///////////////////////// Test Pixel ////////////////////////////////
	var Freq_Test = central_freq
	var PhiC_Test = SCANFB_outputCoeffs[0]+SCANFB_outputCoeffs[1]*Math.pow(Freq_Test,1)+SCANFB_outputCoeffs[2]*Math.pow(Freq_Test,2)+SCANFB_outputCoeffs[3]*Math.pow(Freq_Test,3)
	var PhiC_Testdeg = Math.round(-PhiC_Test+180)															// apply the Antoine's relation defined in eq. (6.8) in page 158 of the Bible
	if(PhiC_Testdeg >= 360) PhiC_Testdeg = PhiC_Testdeg-(360*parseInt(Math.abs(PhiC_Testdeg)/360))			// wrap PhiC in the range [0-360]
	if(PhiC_Testdeg <= 0) PhiC_Testdeg = PhiC_Testdeg+(360*parseInt(1+Math.abs(PhiC_Testdeg)/360))			// wrap PhiC in the range [0-360]

	sendStopDREChannels(3) // in case of ...

	// Sets the amplitude of all the pixels (but the test pixel) to 0
	Reset_AllConfig()
	Send_All(0)

	var run_index = 0
	for(var i=0;i<MOD_FREQ.length;i++)
		{
			MOD_FREQ_REEL=Math.round(MOD_FREQ[i]*Math.pow(2,24)/FS)

			DRE_Test_Pixel_CMD(
								Math.round(PhiC_Testdeg*Math.pow(2,8)/360),				// Test_PHI_Delay (degree)
								Math.round(0*Math.pow(2,8)/360),									// Test_PHI_Rotate (degree)
								Math.round(0*Math.pow(2,12)/360),								// Test_PHI_Initial (degree)
								BBFB_gain,																	// Test_Gain_BBFB
								bias_Amp,																		// Test_Bias_Amplitude
								Math.round(Freq_Test*Math.pow(2,20)/FS),					// Test_Frequency (Hz)
								MOD_FREQ_REEL,					// Test_Bias_Modulation_Frequency (Hz)
								255,																				// Test_Bias_Modulation_Amplitude (necessarily lower than "Test_Bias_Amplitude")
								0,																					// SW2
								0																					// SW1
								)
			sendStartDREChannels(3)
			sendStopDREDaqAcquisition()																// To ensure that buffers are empty
			if(i==0) waitMs(1000)																		// wait to let the BBFB lock the first time (BBFB is never stopped during the scan) 
			var file_size = Math.round(((FS/MOD_FREQ[i])*32/8)*N_PERIOD/1024)	// File size as a function of the modulation frequency and the number of period to be aquired
			print((file_size*1e3*1.1/80e3)/1000+" s")
			print(MOD_FREQ[i]+" --> "+file_size+" ko")
			
			var comment = "_GBW_" + (("0000000"+(Math.round(MOD_FREQ_REEL*FS/Math.pow(2,24))).toString()).slice(-7))+ "Hz_Gain" + Gain.toString() 
			var dump_type = "IQ-ALL" 
			START_DUMP(dump_type,i,0,comment)        // ( dump_type, i, channelID, filename_comment )   with dump_type = [ADC, BIAS, FEEDBACK, IQ_ALL, IQ_TESTBBFB, COUNTER]
			waitMs(file_size*1e3*1.1/80e3)
			STOP_DUMP()
			waitMs(100)

			var dump_type = "IQ-TST" 
			START_DUMP(dump_type,i,0,comment)        // ( dump_type, i, channelID, filename_comment )   with dump_type = [ADC, BIAS, FEEDBACK, IQ_ALL, IQ_TST, COUNTER]
			waitMs(file_size*1e3*1.1/80e3)
			STOP_DUMP()
			waitMs(100)
			
			run_index +=1
		}
	// switch test pixel off
	DRE_Test_Pixel_CMD(
					Math.round(0*Math.pow(2,8)/360),				// Test_PHI_Delay (degree)
					Math.round(0*Math.pow(2,8)/360),				// Test_PHI_Rotate (degree)
					Math.round(0*Math.pow(2,12)/360),			// Test_PHI_Initial (degree)
					0,																			// Test_Gain_BBFB
					0,																				// Test_Bias_Amplitude
					Math.round(0*Math.pow(2,20)/FS),					// Test_Frequency (Hz)
					Math.round(0*Math.pow(2,24)/FS),					// Test_Bias_Modulation_Frequency (Hz)
					0,																				// Test_Bias_Modulation_Amplitude (necessarily lower than "Test_Bias_Amplitude")
					0,																					// SW2
					0																					// SW1
	)
	sendStopDREDaqAcquisition()
	sendStopDREChannels(3)
}

function SendPulse(Pulse_timescale, Pulse_Amplitude, Send_Pulse)
{
	const Pulse_timescale_l					= Math.pow(2,20);
	const Pulse_Amplitude_l					= Math.pow(2,12);
	const Send_Pulse_l						= Math.pow(2,11);
	
	var address_offset 	= 3+Npix*2;
	var address 	= address_offset+3;
	var value 		= Pulse_timescale*Pulse_timescale_l + Pulse_Amplitude*Pulse_Amplitude_l + Send_Pulse*Send_Pulse_l;		// SW2, SW1 and Test_Bias_Modulation_Amplitude are not configured and hence are set to "0"
	sendConfigureDREOneRegister(address,value)
}




//-------------------------------------------------------------------------------------------------------------------------------------//
////////////////////////////////// Functions working with the NEW configuration concept of the GSE //////////////////////////////////////
//-------------------------------------------------------------------------------------------------------------------------------------//

///////////////// Pixels Configuration tables initialization //////////////////////////////
var t_Freq 	= new Array(Npix);
var t_Amp	= new Array(Npix);
var t_Gain	= new Array(Npix);
var t_PhiC	= new Array(Npix);
var t_PhiI	= new Array(Npix);
var t_PhiR	= new Array(Npix);
for(i=0;i<Npix;i++){
	t_Freq[i] 	= -1;
	t_Amp[i]	= -1;
	t_Gain[i]	= -1;
	t_PhiC[i]	= -1;
	t_PhiI[i]	= -1;
	t_PhiR[i]	= -1;
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Reset_AllConfig(){
	for(i=0;i<Npix;i++){
		t_Freq[i] = 0;
		t_Amp[i]	= 0;
		t_Gain[i]	= 0;
		t_PhiC[i]	= 0;
		t_PhiI[i]	= 0;
		t_PhiR[i]	= 0;
	}
	sendConfigureDREPixelsBuffer(0,t_Freq,t_Amp,t_Gain,t_PhiC,t_PhiI,t_PhiR)
}

function Send_All(channelId){
	sendDREPixelsBuffer(channelId)
	waitMs(50)			// Wait for the GSE sending time
}

function Update_AllConfigs(channelId){
	sendConfigureDREPixelsBuffer(channelId,t_Freq,t_Amp,t_Gain,t_PhiC,t_PhiI,t_PhiR)
	sendCalculatePhiCPixelsBuffer(channelId)
}

//----------------------------------------------------------------------------------------------------------------------------
function New_DRE_Pixel_CMD(Pixel_ID,PHI_Delay,PHI_Rotate,Gain_BBFB,Bias_Amplitude,Frequency,PHI_Initial){
	t_Freq[Pixel_ID] 	= Frequency;
	t_Amp[Pixel_ID]		= Bias_Amplitude;
	t_Gain[Pixel_ID]	= Gain_BBFB;
	t_PhiC[Pixel_ID]	= PHI_Delay;
	t_PhiI[Pixel_ID]	= PHI_Initial;
	t_PhiR[Pixel_ID]	= PHI_Rotate;
}

//----------------------------------------------------------------------------------------------------------------------------
function waitingForEndOfScanFB(){
	_req = getNextValue("SCANFB_CommandedSteps,SCANFB_CurrentStep, SCANFB_outputCoeffs_0","chaque fois que SCANFB_CurrentStep sera mis a jour");
	do{
		waitingForNextValue(_req)
	}
	while (SCANFB_CommandedSteps != SCANFB_CurrentStep)
	abortOneRequest(_req)
}

//----------------------------------------------------------------------------------------------------------------------------
function Pixels_40_Simultaneous_Freq_Scan(CenterFreqTab,Span,Step,Amp,i_start){
	var i = i_start
	var Freq_List = ""
	
	Channel_CMD(
						0,											//Loop_Control
						0,											//StartStop (don't touch, always STOP)
						1,											//ADC_ON
						1,											//DACB_ON
						1,											//DACF_ON
						0,											//Select_Input
						1,											//Bias_Enabled
						1,											//Feedback_Enabled
						2,											//Bias_Slope_Speed
						3,											//Bias_Truncation
						3,											//Feedback_Truncation
						32767,									//Compensation_Gain (32767 => unitary gain)
						TARGET									//Feedback_Reverse
	)
	for(var k=0;k<Math.round(Span/Step);k++){
		Freq_List = ""
		for(var n=0;n<Npix;n++){
				var Freq = CenterFreqTab[n] - Span/2 + k*Step
				var PhiIdeg = (Math.PI*n*n/Npix)*180/Math.PI														// apply the Schroeder's relation defined in eq (6.10) in page 163 of the Bible

				New_DRE_Pixel_CMD(
					n,														// Pixel_ID --> +1 because the BBFB is "0" indexed for the moment
					-1,														// PHI_Delay (degree)
					0,														// Test_PHI_Rotate (degree)
					5,													// Gain_BBFB
					Amp,													// Bias_Amplitude
					Freq,													// Frequence
					PhiIdeg													// Test_PHI_Initial (degree)
				)

				Freq_List = Freq_List + Math.round(Freq).toString() +"\n"
		}
		Update_AllConfigs(0)
		Send_All(0)
		waitMs(1)
		sendStartDREChannels(3)
		if(k==0) waitMs(1000) // Wait for ramp-up
		////// Dump Info file ///////
		switchToFileContext(1)
		clearFileContent()
		addToFile(Freq_List)
		saveFileContent("C:/Xifustudio/Dump_Info_file.dumpinfo")
		
		var filename = (("000000" +(i).toString()).slice(-6))+ "_" + (Amp).toString()+ "AMP_" + "_40Pix-Simultaneous-FPA-freq-scan.dat"
		sendStopDREDaqAcquisition()							// To ensure that buffers are empty
		waitMs(1)
		sendStartDREDaqAcquisition(8) // Mode IQ 40 Pixels
		waitMs(1)
		sendStartDumpedDataBackup2Filename(10,filename,filename)
		waitMs(10)
		i+=1
	}
}

//----------------------------------------------------------------------------------------------------------------------------
function Pixels_40_Simultaneous_IV_Scan(CenterFreqTab,AmpMax,AmpMin){
	var Npixscan = CenterFreqTab.length
	var n = 0
	//Ramp-up phase (bias ramp) to avoid any saturation at FPA_Out due to the high raise at startup (I = U(high)/R(~0))
	print("Ramping-up")
	for(var i=0;i<Npixscan;i++){
		var Freq = FREQtab[i]
		var PhiIdeg = (Math.PI*i*i/Npixscan)*180/Math.PI											// apply the Schroeder's relation defined in eq (6.10) in page 163 of the Bible
		if(PhiIdeg >= 360) PhiIdeg = PhiIdeg-(360*parseInt(PhiIdeg/360))							// wrap PhiI in the range [0-360]
		New_DRE_Pixel_CMD(
						i,							// Pixel_ID --> +1 because the BBFB is "0" indexed for the moment
						-1,							// PHI_Delay (degree)
						0,							// Test_PHI_Rotate (degree)
						5,						// Gain_BBFB
						AmpMax,						// Bias_Amplitude
						Freq,						// Increment
						PhiIdeg						// Test_PHI_Initial (degree)
		)
	}
	Update_AllConfigs(0)
	Send_All(0)
	sendStartDREChannels(3)
	waitMs(1000)									// Wait for ramping up

	for(j=AmpMax; j>AmpMin; j--){
		for(var i=0;i<Npixscan;i++){
			var Freq = FREQtab[i]
			var PhiIdeg = (Math.PI*i*i/Npixscan)*180/Math.PI											// apply the Schroeder's relation defined in eq (6.10) in page 163 of the Bible
			if(PhiIdeg >= 360) PhiIdeg = PhiIdeg-(360*parseInt(PhiIdeg/360))							// wrap PhiI in the range [0-360]
			New_DRE_Pixel_CMD(
							i,							// Pixel_ID --> +1 because the BBFB is "0" indexed for the moment
							-1,							// PHI_Delay (degree)
							0,							// Test_PHI_Rotate (degree)
							5,						// Gain_BBFB
							j,							// Bias_Amplitude
							Freq,						// Increment
							PhiIdeg						// Test_PHI_Initial (degree)
			)
		}
		Update_AllConfigs(0)
		Send_All(0)
		var filename = (("000000" +(n).toString()).slice(-6)) + "_" + (j).toString()+ "AMP_" + "_FPAIVscan.dat"
		sendStopDREDaqAcquisition()							// To ensure that buffers are empty
		sendStartDREDaqAcquisition(8)
		sendStartDumpedDataBackup2Filename(10,filename,filename)
		waitMs(10)
		n+=1
	}
}

function START_DUMP(dump_type,i,channelID,filename_comment){		
//This function starts a data dump in a specific acquisition mode (Starts the BBFB, starts the data acquisition).
// Input parameters:
//		dump_type (string)
//			IN-BIA		corresponds to a dump of the INPUT and BIAS raw data 
//			IN-FBk		corresponds to a dump of the INPUT and FEEDBACK raw data 
//			BI-BIA		corresponds to a dump of the BIAS and FEEDBACK raw data 
//			IQ-TST		corresponds to a dump of the internal test pixel data (i.e. clocked at 20Msps) 
//			IN-ALL		corresponds to a dump of the output science data (i.e. all the science pixels sampled at 156 ksps) 
//			COUNTR		corresponds to a dump of the internal test counter data
//		i (number)
//			dump index that is included in the data file name
//		channelID (number)
//			Refence of the channel (0 or 1)
//		filename_comment (string)
// 			Extension to be used in the filename

	var DUMP_MODE = 0
	var error = false
	switch(dump_type){
		case "IN-BIA":
			if(channelID==0) DUMP_MODE = 0
			else 			 DUMP_MODE = 4
			break
		case "IN-FBK":
			if(channelID==0) DUMP_MODE = 1
			else 			 DUMP_MODE = 5
			break
		case "BI-FBK":
			if(channelID==0) DUMP_MODE = 2
			else 			 DUMP_MODE = 6
			break
		case "IQ-TST":
			if(channelID==0) DUMP_MODE = 9
			else 			 DUMP_MODE = 10
			break		
		case "IQ-ALL":
			DUMP_MODE = 8
			break
		case "COUNTR":
			DUMP_MODE = 15
			break
		default:
			print("dump_type error")
			error = true
			break
	}
	if((channelID==0 || channelID==1) && error==false){
		sendStopDREDaqAcquisition()															// To ensure that buffers are empty
		waitMs(100)
		sendOKResetDaqFifo()
		waitMs(100)
		sendStartDumpedDataBackup2Filename(0, maDate()+"_"+(("0000" +(i).toString()).slice(-4))+"_"+dump_type+filename_comment+".dat","")
		//sendStartDumpedDataBackup2Filename(0, (("000" +(i).toString()).slice(-3))+"_"+dump_type+"_DUMP_"+"Channel_"+channelID+"_"+filename_comment+".dat","")
		sendStartDREDaqAcquisition(DUMP_MODE)
		print(dump_type," DUMP File saved")
		print(i)
	}
}

function STOP_DUMP(){
// This function stops a dump data acquisition
// No parameters
	sendStopDumpedDataBackup()
	sendStopDREDaqAcquisition()
}

////////////////////////////////////////////// GENERIC TOOLS /////////////////////////////////////
//---------------------------------------------------------------------------------------------------------------------------------------
function sendConfigFromFile(filename)
// send parameters from a file
{
	var lines = readTextFile(filename)
	var valueRegExp = new RegExp(/write_register\s+[\d+]\s+(0x)*([0-9a-f]+)/i)
	var address = 250;
	var value = 0;
	for (var i=0;i < lines.length - 1;i = i + 2)
	{
		var regValue=lines[i].match(valueRegExp)
		if ((regValue != null))
		{
			if (regValue[1] == "")
				address = parseInt(regValue[2])
			else
				address = parseInt(regValue[2],16)
		}
		regValue = lines[i + 1].match(valueRegExp)
		if ((regValue != null))
		{
			if (regValue[1] == "")
				value = parseInt(regValue[2])
			else
				value = parseInt(regValue[2],16)
		}
		//sendConfigureDREOneRegister(address,value)
		print("0x"+address.toString(16))
		print("0x"+value.toString(16))
		waitMs(WAITING_TIME) 
	}
}

function maDate()
// Returns the date using the format : yearmonthday_hourminutesecond
{
	var d = new Date();
	var Now_date = d.getFullYear()+(("00" +(d.getMonth()+1).toString()).slice(-2))+(("00" +(d.getDate()).toString()).slice(-2))+"_"+(("00" +(d.getHours()).toString()).slice(-2))+(("00" +(d.getMinutes()).toString()).slice(-2))+(("00" +(d.getSeconds()).toString()).slice(-2))
	return Now_date
}

/////////////////////////////   PYTHON   //////////////////////////////

function PythonTempAddress()
// returns useful paths 
{
	var paths = readTextFile("C:/PYTHON/path.config")
	var Projectpath  = paths[0].search("Projectpath :")
	var Temp = paths[8].search("Temp :")
	var TempPath = paths[0].substr(("Projectpath :".length)) + paths[8].substr(("Temp :".length)) + "Temp.txt"
	var PyPath = paths[0].substr(("Projectpath :".length)) + paths[8].substr(("Temp :".length)) + "Temp.py"
	var SCANFBpath = paths[0].substr(("Projectpath :".length)) + paths[6].substr(("caracpath: ".length)) + paths[7].substr(("scanFBdir: ".length)) + "TEMP/"
	var Coefpath = paths[0].substr(("Projectpath :".length)) + paths[6].substr(("caracpath: ".length)) + paths[7].substr(("scanFBdir: ".length)) + "Phi_Coef.txt"
	var SCANGBWpath = paths[0].substr(("Projectpath :".length)) + paths[6].substr(("caracpath: ".length)) + paths[9].substr(("scanGBWdir: ".length)) + "TEMP/"
	var SCANFDMpath = paths[0].substr(("Projectpath :".length)) + paths[6].substr(("caracpath: ".length)) + paths[10].substr(("scanFDMdir: ".length)) + "TEMP/"
	var SCANFPApath = paths[0].substr(("Projectpath :".length)) + paths[6].substr(("caracpath: ".length)) + paths[11].substr(("scanFPAdir: ".length)) + "TEMP/"
	var IVFPApath 	= paths[0].substr(("Projectpath :".length)) + paths[6].substr(("caracpath: ".length)) + paths[12].substr(("IVFPAdir: ".length)) + "TEMP/"
	return [TempPath,PyPath,SCANFBpath,Coefpath,SCANGBWpath,SCANFDMpath,SCANFPApath,IVFPApath]
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Launch_Python_Shell()
// code to launch properly the Python's shell, ie. taking in account modules, startup code, path.config, etc. The generated code is saved into the temporary file and not executed.
{	
	var Temppaths = PythonTempAddress()
	var Commands = [
	"import os, shutil",
	"os.chdir('C:/PYTHON/')",
	"exec(open('custom_startup_code.py').read())",
	"import sys",
	"import numpy as np",
	"import matplotlib.pyplot as plt",
	"import time",
	" "
	]
	for(var i=0; i<Commands.length;i++)
		addToFile(Commands[i])
	saveFileContent(Temppaths[1])
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Analyze_ScanFB_files(GSE_File_index)
{
	switchToFileContext(GSE_File_index)
	var Temppaths = PythonTempAddress()
	clearFileContent()
	Launch_Python_Shell()
	addToFile("PhiC_polynom = processScanFB('TEMP')")
	addToFile("FitCoef = str(PhiC_polynom[0])+','+str(PhiC_polynom[1])+','+str(PhiC_polynom[2])+','+str(PhiC_polynom[3])+','+str(PhiC_polynom[4])+','+str(PhiC_polynom[5])")
	//addToFile("exit(FitCoef)")
	addToFile("Write_Temp_File('"+Temppaths[3]+"',FitCoef)")	// Save the Fit coefficients in a separate file
	saveFileContent(Temppaths[1])
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Analyze_ScanGBW_files(GSE_File_index)
{
	switchToFileContext(GSE_File_index)
	var Temppaths = PythonTempAddress()
	clearFileContent()
	Launch_Python_Shell()
	addToFile("GBWscan = processScanGBW('TEMP')")
	addToFile("exit(GBWscan)")
	saveFileContent(Temppaths[1])
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Analyze_ScanFDM_files(GSE_File_index)
{
	switchToFileContext(GSE_File_index)
	var Temppaths = PythonTempAddress()
	clearFileContent()
	Launch_Python_Shell()
	addToFile("FDMscan = processScanFDM('TEMP')")
	addToFile("exit(FDMscan)")
	saveFileContent(Temppaths[1])
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Analyze_ScanFPA_files(GSE_File_index)
{
	switchToFileContext(GSE_File_index)
	var Temppaths = PythonTempAddress()
	clearFileContent()
	Launch_Python_Shell()
	addToFile("FPAscan = processScanFPA('TEMP')")
	addToFile("exit(FPAscan)")
	saveFileContent(Temppaths[1])
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Analyze_IVFPA_files(GSE_File_index)
{
	switchToFileContext(GSE_File_index)
	var Temppaths = PythonTempAddress()
	clearFileContent()
	Launch_Python_Shell()
	addToFile("IVFPA = processIVFPA('TEMP')")
	addToFile("exit(IVFPA)")
	saveFileContent(Temppaths[1])
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Python_TempFile_exec(GSE_File_index)
// execute the code stored into the temporary file
// To return something from Python do not forget the "exit(...)" command in the Python script
{
	switchToFileContext(GSE_File_index)
	var Temppaths = PythonTempAddress()
	var cmd = dir_Python + " " + Temppaths[1]
	var output = exec(cmd)
	return output
}

//---------------------------------------------------------------------------------------------------------------------------------------
function exec_Python_CMD(GSE_File_index,cmd_array)
// Open a new shell and execute an array of python commands (1 cmd per array line)
{
	switchToFileContext(GSE_File_index)
	clearFileContent()
	var Temppaths = PythonTempAddress()
	for(var i=0; i<cmd_array.length;i++)
	{
		addToFile(cmd_array[i])
		saveFileContent(Temppaths[1])
	}
	var out = Python_Temp_exec()
	print(out)
}



/////////////////////////////////   GLOBAL    //////////////////////////////////////////////
//---------------------------------------------------------------------------------------------------------------------------------------
function Move_to_Local(GSE_File_index,source_folder,dest_folder,type)
{
	switchToFileContext(GSE_File_index)
	var liste = listFiles(source_folder,type)
	clearFileContent()
	Launch_Python_Shell()
	var Temppaths = PythonTempAddress()
	addToFile("from shutil import copyfile")
	addToFile("Empty_Folder('"+dest_folder+"')")
	for(var i=0;i<liste.length;i++)
		addToFile("shutil.copyfile('"+source_folder+liste[i]+"','"+dest_folder+liste[i]+"')")
	saveFileContent(Temppaths[1])
	var out = Python_TempFile_exec()
	print(out)
	for(var i=0;i<liste.length;i++) 
		deleteFile(source_folder+liste[i])
}

//---------------------------------------------------------------------------------------------------------------------------------------
function clear_XIFUstudio_dat_files(){
	alert("WARNING !!! If you press OK, all data files will be suppressed !!!!")
	var liste = listFiles(source_XIFUSTUDIO,"*.dat")
	for(var i=0;i<liste.length;i++) 
		deleteFile(source_XIFUSTUDIO+liste[i])
}


