include("./tools.dscript")
include("./configure_demux.dscript")

////////////////////////////////////////////////////////////////////////////////
// Test sequence
////////////////////////////////////////////////////////////////////////////////
function test_sequence(
	session_name,
	session_comment,
	operator_name,
	Channel_ID,
	Ki,
	er_noise,
	er_pulses,
	er_duration
	)
	
// This function makes one test sequence for a set of parameters
{
	// Opening the session
	sendStartSession(session_name, session_comment)
	
	// Saving test parameters in a file
	setAndMemorize( "session_name", session_name)
	setAndMemorize( "session_comment", session_comment)
	setAndMemorize( "operator_name", operator_name)
	setAndMemorize( "Channel_ID", Channel_ID)
	setAndMemorize( "KiNorm", KiNorm)
	setAndMemorize( "Ki", Ki)
	setAndMemorize( "er_duration", er_duration)

	copyFileToBackupDir(getEGSEDirectory()+"\\parametersTF.dispatcher","HK\\parametersTF.dispatcher")  // copy HK limits
	
	// Sauvegarde des scripts
	getLatestValue("DISP_BackupsCurrentDirectory")
	mkpath(DISP_BackupsCurrentDirectory+"\\OUTPUTS")
	mkpath(DISP_BackupsCurrentDirectory+"\\SCRIPTS_GSE\\demux-perfs-js")
	copyFileToBackupDir(".\\tools.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\tools.dscript") 
	copyFileToBackupDir(".\\startup_demux.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\startup_demux.dscript") 
	copyFileToBackupDir(".\\test_sequence.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\test_sequence.dscript") 
	copyFileToBackupDir(".\\start_TM.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\start_TM.dscript") 
	copyFileToBackupDir(".\\launcher.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\launcher.dscript") 
	copyFileToBackupDir(".\\configure_demux.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\configure_demux.dscript") 
	copyFileToBackupDir(__FILE__,"\\SCRIPTS_GSE\\demux-perfs-js\\"+__FILE__.split("/").pop()) // sauvegarde du script courant

	saveMemorizedParametersToBackupDir("SCRIPTS_GSE\\demux-perfs-js\\"+__FILE__.split("/").pop().split(".")[0]+"_PARAMETERS.txt")

	print(">>---------------------------------------------------------")
	print(">>  Configuring demux delays and gains...")
	configure_demux(Ki)
	print("Ki :  ", Ki)

	science_dump(Channel_ID, 500, "")		
	adc_dump(Channel_ID, 500)
	DACSQ1_science_dump(Channel_ID, 500)	

	if (er_noise){
		print("Measuring noise data ...")
		science_dump(Channel_ID, er_duration, "_er_noise")		
	}
	if (er_pulses){
		print("Measuring calibration pulses ...")
		science_dump(Channel_ID, er_duration, "_er_calib")
		print("Measuring pulses ...")
		science_dump(Channel_ID, er_duration, "_er_measu")
	}
	
	saveLogToBackupDir("scriptlog.txt")
	sendStopSession()

	onAbortScript()

	print("Processing data ...")
	output = copyDirToBackupDirAndExecuteBat("..\\..\\SCRIPTS_ANALYSE\\analysis-tools",".\\SCRIPTS_ANALYSE\\analysis-tools","do-analysis.bat")
	addToFile(output)

	//print("Compressing data ...")
	//zipData()

	print("End of session " + session_name)
	print(">>---------------------------------------------------------")

	clean_stop()	
}

////////////////////////////////////////////////////////////////////////////////
function science_dump(column_ID, duration_ms, comment)
{
	START_DUMP("SCIENCE_TM",0,column_ID, comment)
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function adc_dump(column_ID, duration_ms)
{
	START_DUMP("ERROR_ADC",0,column_ID,"_adc_dump")
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function DACSQ1_science_dump(column_ID, duration_ms)
{
	START_DUMP("DACSQ1_SCIENCE",0,column_ID,"_DACSQ1_science_dump")
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
