include("./Tools.dscript")

////////////////////////////////////////////////////////////////////////////////
// Test sequence
////////////////////////////////////////////////////////////////////////////////
function test_sequence(
	session_name,
	session_comment,
	operator_name,
	Channel_ID,
	Default_amp,
	test_pix_index,
	amp_pixel_test,
	SQUID_interne,
	Gain,
	BIAS_trunc,
	FBCK_trunc,
	FBCK_gain,
	Fgridratio,
	dacMode,
	Spread,
	Npix,
	FS,
	DoGBW,
	DoScienceSpectra,
	nbr_spectra,
	spectra_duration_ms,
	DoEnergyResol,
	ER_nbr_pulses_meas,
	Threshold,
	ModulationRatio,
	saveIQ,
	Test_pix_only
	)
// This function makes one test sequence for a set of parameters
{
	// Opening the session
	sendStartSession(session_name, session_comment)
	// Saving test parameters in a file
	setAndMemorize( "session_name"			, session_name)
	setAndMemorize( "session_comment"		, session_comment)
	setAndMemorize( "operator_name"			, operator_name)
	setAndMemorize( "Channel_ID"			, Channel_ID)
	setAndMemorize( "Default_amp"			, Default_amp)
	setAndMemorize( "test_pix_index"		, test_pix_index)
	setAndMemorize( "amp_pixel_test"		, amp_pixel_test)
	setAndMemorize( "SQUID_interne"		, SQUID_interne)
	setAndMemorize( "Gain"					, Gain)
	setAndMemorize( "BIAS_trunc"			, BIAS_trunc)
	setAndMemorize( "FBCK_trunc"			, FBCK_trunc)
	setAndMemorize( "FBCK_gain"			, FBCK_gain)
	setAndMemorize( "Fgrid"					, FS/Fgridratio)
	setAndMemorize( "dacMode"				, dacMode)
	setAndMemorize( "Spread"				, Spread )
	setAndMemorize( "Npix"					, Npix )	// Defined in the script DRE_Tools_REFERENCE
	setAndMemorize( "FS"					, FS)		// Defined in the script DRE_Tools_REFERENCE
	setAndMemorize( "DoGBW"					, DoGBW)
	setAndMemorize( "DoScienceSpectra"		, DoScienceSpectra)
	setAndMemorize( "nbr_spectra"			, nbr_spectra)
	setAndMemorize( "spectra_duration_ms"	, spectra_duration_ms)
	setAndMemorize( "ER_nbr_pulses_meas"	, ER_nbr_pulses_meas)
	setAndMemorize( "Threshold"	, Threshold)
	setAndMemorize( "ModulationRatio"	, ModulationRatio)
	setAndMemorize( "saveIQ"	, saveIQ)
	setAndMemorize( "Test_pix_only"	, Test_pix_only)

	copyFileToBackupDir(getEGSEDirectory()+"\\parametersTF.dispatcher","HK\\parametersTF.dispatcher")  // copy HK limits
	
	getLatestValue("DISP_BackupsCurrentDirectory")
	mkpath(DISP_BackupsCurrentDirectory+"\\SCRIPTS_GSE\\demux-perfs-js")
	copyFileToBackupDir(".\\Launcher.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Launcher.dscript") // sauvegarde du script included
	copyFileToBackupDir(".\\Tools.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Tools.dscript") // sauvegarde du script included
	copyFileToBackupDir(".\\Startup.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Startup.dscript") // sauvegarde du script de demarrage included
	copyFileToBackupDir(__FILE__,"\\SCRIPTS_GSE\\demux-perfs-js\\"+__FILE__.split("/").pop()) // sauvegarde du script courant
	copyDirToBackupDir(getEGSEDirectory()+"\\EP",".\\EP_PARAMETERS")	

	saveMemorizedParametersToBackupDir("SCRIPTS_GSE\\demux-perfs-js\\"+__FILE__.split("/").pop().split(".")[0]+"_PARAMETERS.txt")
	
	// Computing the carrier frequencies
	carriers_param=carrier_freq2(Fgridratio)
	//FREQtab = carrier_freq(Spread, Fgrid)
	FREQtab=carriers_param.FREQtab
	PHIItab=carriers_param.PHIItab
	
	// Resetting the DEMUX firmware
	DRE_resetAll()

	// Measurement of housekeepings
	Start_HK_collection()

	// Configuration of the DEMUX firmware (channels)
	configure_DEMUX_channel(Channel_ID, SQUID_interne, BIAS_trunc, FBCK_gain, FBCK_trunc)

	// Measurement of gain bandwidth product
	if (DoGBW) {
		ScanGBW(Channel_ID, Default_amp, Gain, FREQtab[test_pix_index])}
	
	// Configuration of the DEMUX firmware (pixels)
	configure_DEMUX_pixels(Channel_ID, Default_amp, Gain, FREQtab, PHIItab, test_pix_index, amp_pixel_test, Test_pix_only)

	//  Start DEMUX
	sendStartDREChannels(3)
	waitMs(1000)            // Wait for the ramp

	// Measurement of the data dumps
	mk_dumps(Channel_ID, 1000)

	// Measurement of one DDS output dump (for test only)

	mk_dumps_DDSout(1000)


	// Measurement of IQ files for spectra characterisation
	if (DoScienceSpectra) {
	mk_science_data_files(Channel_ID, nbr_spectra, spectra_duration_ms)}


	if (DoEnergyResol){
	// Measurement of energy resolution
	mk_energy_resol_tst(Channel_ID, ER_nbr_pulses_meas, ModulationRatio, Threshold, saveIQ)}

	Stop_HK_collection()
	saveLogToBackupDir("scriptlog.txt")
	sendStopSession()

	onAbortScript()

	print("Processing data ...")
	output = copyDirToBackupDirAndExecuteBat("..\\..\\SCRIPTS_PYTHON\\demux-perfs-py",".\\SCRIPTS_PYTHON\\demux-perfs-py","python-perfs.bat")
	addToFile(output)

	print("Compressing data ...")
	zipData()

	print("End of session " + session_name)
}

////////////////////////////////////////////////////////////////////////////////
// Functions definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
function carrier_freq(Spread, Fgrid)
// This function computes the set of carrier frequencies
	{
	switch (Spread) {
		case "No":
			// Definition of LC resonance frequencies: 100.0 kHz step and  0.0 kHz dispersion @ 1 sigma
			print("No spread around ideal 100kHz grid")
			FREQtab = [
				1000000.00, 1100000.00, 1200000.00, 1300000.00, 1400000.00, 1500000.00, 1600000.00, 1700000.00,
				1800000.00, 1900000.00, 2000000.00, 2100000.00, 2200000.00, 2300000.00, 2400000.00, 2500000.00,
				2600000.00, 2700000.00, 2800000.00, 2900000.00, 3000000.00, 3100000.00, 3200000.00, 3300000.00,
				3400000.00, 3500000.00, 3600000.00, 3700000.00, 3800000.00, 3900000.00, 4000000.00, 4100000.00,
				4200000.00, 4300000.00, 4400000.00, 4500000.00, 4600000.00, 4700000.00, 4800000.00, 4900000.00,
				]
			break
		case "Normal":
			// Definition of LC resonance frequencies: 100.0 kHz step and  2.0 kHz dispersion @ 1 sigma
			print("Normal spread around ideal 100kHz grid")
			FREQtab = [
				996704.86, 1097653.73, 1197333.15, 1301868.92, 1400987.31, 1500698.06, 1596579.61, 1697836.03,
				1794853.56, 1901259.85, 1999130.86, 2101956.92, 2200656.92, 2299750.19, 2400616.07, 2499278.93,
				2598731.30, 2701501.05, 2798540.48, 2903169.11, 2998998.49, 3099093.41, 3198765.55, 3297652.76,
				3398986.46, 3501151.12, 3602702.04, 3702049.53, 3797144.36, 3899066.58, 4001907.83, 4099602.47,
				4200198.73, 4301944.65, 4398899.80, 4501899.92, 4602836.70, 4699252.43, 4797968.19, 4900545.02,
				]
			break
		case "Huge":
			// Definition of LC resonance frequencies: 100.0 kHz step and  5.0 kHz dispersion @ 1 sigma
			print("Huge spread around ideal 100kHz grid")
			FREQtab = [
				1002656.49, 1102642.86, 1199864.85, 1304155.35, 1408462.12, 1496696.95, 1597934.81, 1703763.20,
				1799162.90, 1892685.25, 2006563.03, 2097925.96, 2206107.51, 2299695.00, 2395534.38, 2512506.79,
				2596784.44, 2696679.10, 2794153.82, 2900068.66, 2992240.22, 3089285.15, 3205906.49, 3304381.29,
				3399724.42, 3501857.99, 3600557.53, 3702984.09, 3803244.73, 3899462.84, 4007617.30, 4104209.38,
				4197136.25, 4299587.03, 4409470.87, 4500047.15, 4601632.49, 4698735.13, 4802668.38, 4906147.21,
				]
			break
		}

	for(i=0;i<Npix;i++){            // This loop aligns the firmware frequencies on a frequency grid
		FREQtab[i] = Fgrid*(Math.round(FREQtab[i]/Fgrid))
		}

	print("The values of the carrier frequencies set in the firmware are:")
	Ncol=8
	Nlines=5
	for(line=0;line<Nlines;line++)
		{
		for(linestring='', col=0;col<Ncol;col++)
			{
			freq=("0000000"+parseInt(FREQtab[line*Ncol+col]).toString()).slice(-7)+"Hz    "
			linestring=linestring+freq
			}
		print(linestring)
		}
	return FREQtab

	}

////////////////////////////////////////////////////////////////////////////////
function carrier_freq2(Fgridratio)
// This function computes the set of carrier frequencies
	{
	switch (Fgridratio) {
		case Math.pow(2,13):
			// Sampling frequency:          19530000 Hz
			// Mean frequency spacing:        100000 Hz
			// 1-sigma frequency dispersion:    2000 Hz
			// Frequency grid:                  2384 Hz
			// Set of carrier frequencies (Hz):
			// Ratio PeakPeak/FSR: 90.00%
			// Crest factor: 3.00
			freqtab=[
				998909.91, 1099039.31, 1201552.73, 1299298.10, 1399427.49, 1499556.88, 1599686.28, 1699815.67,
				1799945.07, 1900074.46, 1997819.82, 2097949.22, 2198078.61, 2298208.01, 2400721.44, 2500850.83,
				2603364.26, 2698725.59, 2801239.01, 2898984.38, 2999113.77, 3096859.13, 3201756.59, 3299501.95,
				3402015.38, 3497376.71, 3597506.10, 3697635.50, 3797764.89, 3902662.35, 4000407.71, 4098153.08,
				4200666.50, 4300795.90, 4398541.26, 4496286.62, 4596416.02, 4698929.44, 4803826.90, 4901572.27
				]
			// Set of carrier initial phases (Deg):
			phitab=[
				 126.56,  345.32,  127.71,  207.95,   46.23,  273.25,  278.96,  180.35,
				 142.38,  124.45,  162.16,  218.67,  238.54,   11.69,   58.36,  316.49,
				 243.46,  335.39,  184.92,   94.39,  227.55,  202.59,  102.13,   84.90,
				 178.51,  218.14,  159.35,  317.11,   10.99,  156.97,   92.81,  331.52,
				 128.67,  171.74,  265.52,   61.70,  304.37,  226.76,   90.70,  179.21
				]
			break

		case Math.pow(2,15):
			// Sampling frequency:          19530000 Hz
			// Mean frequency spacing:        100000 Hz
			// 1-sigma frequency dispersion:    2000 Hz
			// Frequency grid:                   596 Hz
			// Set of carrier frequencies (Hz):
			// Ratio PeakPeak/FSR: 90.00%
			// Crest factor: 3.36
			freqtab=[
				998909.91, 1100231.32, 1197380.68, 1296914.06, 1400023.50, 1501940.92, 1600282.29, 1699219.67,
				1805905.15, 1902458.50, 2002587.89, 2097353.21, 2199866.64, 2299400.02, 2400721.44, 2499062.81,
				2600384.22, 2702897.64, 2801239.01, 2900772.40, 3000901.79, 3099839.17, 3199968.57, 3299501.95,
				3404399.41, 3499760.74, 3602274.17, 3698827.51, 3800744.93, 3902066.35, 3997427.67, 4101729.13,
				4201858.52, 4299603.88, 4400329.28, 4499266.66, 4602972.11, 4697737.43, 4798462.83, 4900976.26
				]
			// Set of carrier initial phases (Deg):
			phitab=[
				  44.82,  200.57,   62.58,  207.86,  162.51,  189.05,  334.95,   36.21,
				  19.25,  122.43,  214.45,  241.61,  254.79,  294.26,  164.71,  315.44,
				 328.54,  339.87,  245.39,   17.58,  341.19,  131.92,  213.22,  356.31,
				 147.57,   58.54,   32.87,  104.94,   85.25,  264.90,  159.70,  162.51,
				  81.47,  308.76,  336.45,  340.75,  293.99,  242.40,  129.46,  189.40
				]
			break

		case Math.pow(2,17):
			// Sampling frequency:          19530000 Hz
			// Mean frequency spacing:        100000 Hz
			// 1-sigma frequency dispersion:    2000 Hz
			// Frequency grid:                   149 Hz
			// Set of carrier frequencies (Hz):
			// Ratio PeakPeak/FSR: 90.00%
			// Crest factor: 3.77
			freqtab=[
				998015.90, 1096953.28, 1199168.70, 1299000.09, 1400470.50, 1497768.86, 1599090.27, 1701901.70,
				1795177.00, 1904246.52, 2001544.88, 2101078.26, 2197035.60, 2299996.03, 2404148.48, 2502340.85,
				2599490.20, 2700811.61, 2798258.97, 2899729.39, 2997772.75, 3101180.19, 3200266.57, 3294584.88,
				3398141.33, 3499462.74, 3601678.16, 3699125.52, 3799850.92, 3901917.34, 4002940.75, 4098898.09,
				4198133.47, 4297070.85, 4400031.28, 4499415.66, 4601184.08, 4697588.42, 4798313.83, 4905148.32
				]
			// Set of carrier initial phases (Deg):
			phitab=[
				 178.77,  356.75,  229.66,    0.09,  353.85,   16.70,  278.96,  354.90,
				 180.09,   89.74,  232.03,  269.91,    6.94,   81.12,  224.30,  269.74,
				 239.06,  242.31,  193.89,  344.27,  287.14,   25.14,  180.97,  189.32,
				 113.82,  312.28,  171.12,  168.31,  340.05,   97.82,   96.50,  244.95,
				 256.73,  321.77,  124.54,  352.53,   91.58,   83.14,  164.88,  189.40
				]
			break
		 
		case Math.pow(2,19):
			// Sampling frequency:          19530000 Hz
			// Mean frequency spacing:        100000 Hz
			// 1-sigma frequency dispersion:    2000 Hz
			// Frequency grid:                    37 Hz
			// Set of carrier frequencies (Hz):
			// Ratio PeakPeak/FSR: 90.00%
			// Crest factor: 3.96
			freqtab=[
				1003342.72, 1100790.08, 1203676.01, 1299298.10, 1401662.52, 1498066.86, 1597115.99, 1701007.69,
				1801807.59, 1898062.93, 1999980.35, 2100929.26, 2199866.64, 2303832.84, 2399492.17, 2499137.31,
				2601464.48, 2700997.87, 2799562.74, 2897792.36, 2999449.02, 3097492.39, 3201570.34, 3299539.20,
				3398849.09, 3498754.98, 3606185.47, 3697635.50, 3798174.65, 3899458.81, 4000184.21, 4100164.60,
				4202491.78, 4299007.87, 4400292.03, 4495690.61, 4601109.58, 4703027.00, 4800325.36, 4897213.95
				]
			// Set of carrier initial phases (Deg):
			phitab=[
				 289.78,  113.73,  263.32,  252.33,  215.95,  217.09,   90.79,  230.36,
				 141.06,  128.41,   86.57,  125.95,  277.73,  248.47,  183.08,   73.92,
				  35.07,   91.05,  354.55,  229.39,   10.72,   83.23,    2.29,  162.60,
				 214.72,  207.42,   27.86,   41.48,  289.69,  358.07,    4.13,  102.04,
				  19.78,  161.63,  270.44,  353.32,    5.71,  137.90,  348.13,   28.21
				]
			break
   
		case Math.pow(2,21):
			// Sampling frequency:          19530000 Hz
			// Mean frequency spacing:        100000 Hz
			// 1-sigma frequency dispersion:    2000 Hz
			// Frequency grid:                     9 Hz
			// Set of carrier frequencies (Hz):
			// Ratio PeakPeak/FSR: 90.00%
			// Crest factor: 4.44
			freqtab=[
				1002681.53, 1101386.09, 1198842.76, 1299828.92, 1401038.58, 1501512.54, 1601641.93, 1703643.16,
				1802655.04, 1900856.72, 2003547.09, 2099122.61, 2200742.03, 2303562.77, 2398244.28, 2499537.75,
				2602330.56, 2699582.35, 2797057.64, 2901033.15, 2995779.85, 3099895.05, 3202166.35, 3301718.36,
				3401531.12, 3500477.81, 3600122.95, 3699954.34, 3796572.88, 3898173.67, 3998452.06, 4098423.14,
				4198356.97, 4297396.79, 4398410.88, 4499713.67, 4599777.87, 4701313.48, 4804646.42, 4899076.48
				]
			// Set of carrier initial phases (Deg):
			phitab=[
				  76.38,  168.75,  133.42,  159.17,  303.22,  327.66,   40.43,  188.09,
				  17.49,   53.00,  137.99,  274.04,  347.96,  305.60,  286.96,  356.75,
				  10.46,  199.51,  245.83,  249.96,   57.39,  130.87,  169.19,  123.93,
				 171.74,  183.52,    6.77,   46.14,   27.86,  340.93,  154.95,  122.78,
				 103.18,   51.24,  329.41,  197.75,  166.20,   88.42,  314.38,   84.46
				]
			break
		}

		return {
			FREQtab: freqtab,
			PHIItab: phitab
			}
		}

////////////////////////////////////////////////////////////////////////////////
function configure_DEMUX_channel(Channel_ID, SQUID_interne, BIAS_trunc, FBCK_gain, FBCK_trunc)
// This function configures the channels parameters of the DEMUX firmware
{
	//// Channel settings
	Channel_CMD(
		Channel_ID,			// Channel_id
		0,					// Loop_Control
		0,					// StartStop (don't touch, always STOP)
		0,					// Delock_ON (0 not active)
		1,					// ADC_ON
		1,					// DACB_ON
		1,					// DACF_ON
		SQUID_interne,		// Select_Input
		1,					// Bias_Enabled
		1,					// Feedback_Enabled
		2,					// Bias_Slope_Speed
		BIAS_trunc,			// Bias_Truncation
		FBCK_trunc,			// Feedback_Truncation
		FBCK_gain,				// Compensation_Gain (32767 => unitary gain)
		0,					// Feedback_Reverse
		7,				// Wait for relock (0..7)
		0x7FF			// Delock_level (maximum positive value)
		)
}

////////////////////////////////////////////////////////////////////////////////
function configure_DEMUX_pixels(Channel_ID, Amp, Gain, FREQtab, PHIItab, test_pix_index, amp_pixel_test, Test_pix_only)
// This function configures the pixels' parameters of the DEMUX firmware for the test
// In this configuration 39 standard pixels and the test pixel are used.
// Input parameters:
//		Amp: (number)
//			the amplitude of the pixels
//		FREQtab: (array)
//			the values of the carriers
//		test_pix_index: (number)
//			the index of the standard pixel to be replaced by the test pixel
//			if -1 the test pixel is switched off
{
	if (Test_pix_only){
		print("Standard pixels switched off")
		Reset_All_Configs()
	} else {
		print("Standard pixels switched on")
		for(var Pixel_ID=0;Pixel_ID<Npix;Pixel_ID++)
		{
			Set_Pixel_Config(
				Pixel_ID,		// Pixel_ID
				-1,				// PHI_Delay (degree) (Phi_C)
				0,				// Test_PHI_Rotate (degree)
				Gain,			// Gain_BBFB
				Amp,			// Bias_Amplitude
				FREQtab[Pixel_ID],	// Frequency
				PHIItab[Pixel_ID]	// Test_PHI_Initial (degree)
				)
		}
	}

	////// Test pixel's settings
	// Frequency
	Freq_Test = FREQtab[test_pix_index]
	// Initial Phase
	PhiIdeg = PHIItab[test_pix_index]
	// Correction Phase
	PhiC_Testdeg = Get_PhiC(Freq_Test)
	if (test_pix_index==-1) // switching test pixel off
	{
		print("switching test pixel off")
		amp_pixel_test = 0
		Gain = 0
		Freq_Test = 0
	}
	else
	{
		// Switch off the pixel where we will place the test pixel 
		Set_Pixel_Off(test_pix_index)
	}

	// Apply the configuration of the standard pixels
	Update_All_Configs(0)
	Apply_All_Configs(0)

	Test_Pixel_CMD(
		Channel_ID,
		//Math.round((PhiC_Testdeg+70)*Math.pow(2,8)/360),		// Test_PHI_Delay (degree) to test a non optimal value
		Math.round(PhiC_Testdeg*Math.pow(2,8)/360),		// Test_PHI_Delay (degree)
		Math.round(0*Math.pow(2,8)/360),				// Test_PHI_Rotate (degree)
		Math.round(PhiIdeg*Math.pow(2,12)/360),			// Test_PHI_Initial (degree)
		Gain,											// Test_Gain_BBFB
		amp_pixel_test,									// Test_Bias_Amplitude
		Math.round(Freq_Test*Math.pow(2,20)/FS),		// Increment
		0,												// Test_Bias_Modulation_Frequency (Hz)
		0,												// Test_Bias_Modulation_Amplitude (necessarily lower than "Test_Bias_Amplitude")
		0,												// SW2
		0,									// SW1
		0,									// Pulse_timescale
		0,									// Pulse_Amplitude
		0									// Send_Pulse
		)
}

////////////////////////////////////////////////////////////////////////////////
function Start_HK_collection()
{
	sendStartDREHkAcquisition(1)	// periodic HK from ADC (to be stopped at the end of the sequence)
}

////////////////////////////////////////////////////////////////////////////////
function Stop_HK_collection()
{
	sendStopDREHkAcquisition()
}

////////////////////////////////////////////////////////////////////////////////
function mk_dumps(Channel_ID, duration_ms)
// This function makes BIAS, INPUT and FEEDBACK dumps
// Input parameters:
//		duration_ms: number
//			duration of each dump
{
	print(">>---------------------------------------------------------")
	print(">>- Measuring ADC and DACs data dumps")

	START_DUMP("IN-BIA",0,Channel_ID,"")
	waitMs(duration_ms)
	STOP_DUMP()
	
	START_DUMP("IN-FBK",0,Channel_ID,"")
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function mk_dumps_DDSout(duration_ms)
// This function makes a dump of one DDS output.
// This is only compatible with some test versions of the firmware
//		duration_ms: number
//			duration of each dump
{
	print(">>---------------------------------------------------------")
	print(">>- Measuring DDS output dump")

	Channel_ID = 1
	START_DUMP("IN-BIA", 0, Channel_ID, "DDSout1")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("IN-FBK", 0, Channel_ID, "DDSout2")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("BI-FBK", 0, Channel_ID, "DDSout3")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("IQ-TST", 0, Channel_ID, "DDSout4")
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function mk_science_data_files(Channel_ID, nbr_files, duration_ms)
// This function makes a series of science data files in order to measure the science data spectra
// Input parameters:
//		duration_ms: (number)
//			duration of each dump
//		nbr_spectra: (number)
//			the number of files to measure
{
	print(">>---------------------------------------------------------")
	print(">>- Measurement of IQ data files for spectra measurement:")
	for(i=0;i<nbr_files;i++){
		//Dump IQ-ALL (all pixels filtered and data @ 156ksps)
		START_DUMP("IQ-ALL",i,Channel_ID,"_Science-Data")        // ( dump_type, i, channelID, filename_comment )
		waitMs(duration_ms)
		STOP_DUMP()
	}
		
	for(i=0;i<nbr_files;i++){
		//Dump IQ-TST (test pixel - data @ 20Msps)
		START_DUMP("IQ-TST",i,Channel_ID,"_Science-Data")        // ( dump_type, i, channelID, filename_comment )
		waitMs(duration_ms)
		STOP_DUMP()
	}
}

////////////////////////////////////////////////////////////////////////////////
function mk_energy_resol_tst(Channel_id,  Npulses_meas, ModulationRatio, Threshold, saveIQ)
// This function makes the measurements necessary to estimate the energy resolution
{
	print(">>---------------------------------------------------------")
	print(">>- Measuring ADC dumps with pulses")
	START_DUMP("IN-BIA" ,0,Channel_id,"_PULSE")
	sendPulsesAndWaitingForInjectionDone(Channel_id,20,50,ModulationRatio)
	STOP_DUMP()
	
	print(">>---------------------------------------------------------")
	print("  - Measuring energy resolution")
	print("  - PULSE Measurements: ")
//	sendConfigureEventProcessor(1,Threshold) // => Switch EP on
	sendStartEventProcessor(1000,"check_resol",Threshold)
	sendStartDREDaqAcquisition(8) // IQ-ALL
	if (saveIQ)
		{
		print("Saving IQ data")
		sendStartDumpedDataBackup(0)
		}

//	sendStartSpectrumAcquisition()
	sendPulsesAndWaitingForInjectionDone(Channel_id,Npulses_meas,70,ModulationRatio)
//	sendSaveSpectrums()

sendStopEventProcessor()
//	sendConfigureEventProcessor(0,Threshold) // => Switch EP off	
	sendStopDumpedDataBackup()
	sendStopDREDaqAcquisition()
}

////////////////////////////////////////////////////////////////////////////////
function clean_stop()
{
	sendStopEventProcessor()
	//sendConfigureEventProcessor(0,65535)
	sendStopDREHkAcquisition()
	sendStopDREChannels(3)
	sendStopDumpedDataBackup()
}

////////////////////////////////////////////////////////////////////////////////
function onAbortScript()
// This function is called when clicking on the "Abort" button
// It is used to abort the setup in a proper way
{
	clean_stop()
	
	sendStopSession()
}

////////////////////////////////////////////////////////////////////////////////
