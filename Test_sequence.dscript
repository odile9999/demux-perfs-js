include("./Tools.dscript")
include("./frequency_sets.dscript")

////////////////////////////////////////////////////////////////////////////////
// Test sequence
////////////////////////////////////////////////////////////////////////////////
function test_sequence(
	session_name,
	session_comment,
	operator_name,
	Channel_ID,
	Default_amp,
	test_pix_index,
	amp_pixel_test,
	SQUID_interne,
	Gain,
	BIAS_trunc,
	FBCK_trunc,
	FBCK_gain,
	Fgridratio,
	dacMode,
	Spread,
	Npix,
	Ncarriers,
	FS,
	DoGBW,
	DoScienceSpectra,
	DoScienceSpectra20Msps,
	nbr_spectra,
	spectra_duration_ms,
	DoEnergyResol,
	PixelType,
	ER_nbr_pulses_calib,
	ER_nbr_pulses_meas,
	ER_nbr_files,
	Threshold,
	ModulationRatio,
	TES_NL,
	saveIQ,
	Test_pix_only,
	NeighbourPix_Off,
	openloop,
	DoDelockTst, 
	Delock_level, 
	Wait_for_relock
	)
// This function makes one test sequence for a set of parameters
{
	// Opening the session
	sendStartSession(session_name, session_comment)
	// Saving test parameters in a file
	setAndMemorize( "session_name", session_name)
	setAndMemorize( "session_comment", session_comment)
	setAndMemorize( "operator_name", operator_name)
	setAndMemorize( "Channel_ID", Channel_ID)
	setAndMemorize( "Default_amp", Default_amp)
	setAndMemorize( "test_pix_index", test_pix_index)
	setAndMemorize( "amp_pixel_test", amp_pixel_test)
	setAndMemorize( "SQUID_interne", SQUID_interne)
	setAndMemorize( "Gain", Gain)
	setAndMemorize( "BIAS_trunc", BIAS_trunc)
	setAndMemorize( "FBCK_trunc", FBCK_trunc)
	setAndMemorize( "FBCK_gain", FBCK_gain)
	setAndMemorize( "Fgrid", FS/Fgridratio)
	setAndMemorize( "dacMode", dacMode)
	setAndMemorize( "Spread", Spread )
	setAndMemorize( "Npix", Npix )
	setAndMemorize( "Ncarriers", Ncarriers )
	setAndMemorize( "FS", FS)
	setAndMemorize( "DoGBW"	, DoGBW)
	setAndMemorize( "DoScienceSpectra", DoScienceSpectra)
	setAndMemorize( "DoScienceSpectra20Msps", DoScienceSpectra20Msps)
	setAndMemorize( "nbr_spectra", nbr_spectra)
	setAndMemorize( "spectra_duration_ms", spectra_duration_ms)
	setAndMemorize( "DoEnergyResol", DoEnergyResol)
	setAndMemorize( "PixelType", PixelType)
	setAndMemorize( "ER_nbr_pulses_calib", ER_nbr_pulses_calib)
	setAndMemorize( "ER_nbr_pulses_meas", ER_nbr_pulses_meas)
	setAndMemorize( "ER_nbr_files", ER_nbr_files)
	setAndMemorize( "Threshold", Threshold)
	setAndMemorize( "ModulationRatio", ModulationRatio)
	setAndMemorize( "TES_NL", TES_NL)
	setAndMemorize( "saveIQ", saveIQ)
	setAndMemorize( "Test_pix_only", Test_pix_only)
	setAndMemorize( "NeighbourPix_Off", NeighbourPix_Off)
	setAndMemorize( "openloop", openloop)
	setAndMemorize( "DoDelockTst", DoDelockTst)
	setAndMemorize( "Delock_level", Delock_level)
	setAndMemorize( "Wait_for_relock", Wait_for_relock)

	copyFileToBackupDir(getEGSEDirectory()+"\\parametersTF.dispatcher","HK\\parametersTF.dispatcher")  // copy HK limits
	
	// Sauvegarde des scripts
	getLatestValue("DISP_BackupsCurrentDirectory")
	mkpath(DISP_BackupsCurrentDirectory+"\\SCRIPTS_GSE\\demux-perfs-js")
	copyFileToBackupDir(".\\Launcher.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Launcher.dscript") 
	copyFileToBackupDir(".\\Tools.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Tools.dscript") 
	copyFileToBackupDir(".\\Startup.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Startup.dscript") 
	copyFileToBackupDir(".\\Configs.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Configs.dscript") 
	copyFileToBackupDir(".\\frequency_sets.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\frequency_sets.dscript") 
	copyFileToBackupDir(".\\EEPCalibration.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\EEPCalibration.dscript") 
	copyFileToBackupDir(__FILE__,"\\SCRIPTS_GSE\\demux-perfs-js\\"+__FILE__.split("/").pop()) // sauvegarde du script courant
	copyDirToBackupDir(getEGSEDirectory()+"\\EP",".\\EP_PARAMETERS")	

	saveMemorizedParametersToBackupDir("SCRIPTS_GSE\\demux-perfs-js\\"+__FILE__.split("/").pop().split(".")[0]+"_PARAMETERS.txt")
	
	// Computing the carrier frequencies
	carriers_param=carrier_freq2(Fgridratio, Ncarriers)
	//carriers_param = carrier_freq(Spread, Fgrid, Npix)
	FREQtab=carriers_param.FREQtab
	PHIItab=carriers_param.PHIItab
	
	// Resetting the DEMUX firmware
	DRE_resetAll()

	// Measurement of housekeepings
	Start_HK_collection()

	// Configuration of the DEMUX firmware (channels)
	Channel_0_conf=define_Channel_conf(
		Loop_Control=0,
		StartStop=0,
		Nonlinear_ON=0,
		Manual_Delock=0,
		Delock_ON=0,
		ADC_ON=1,
		DACB_ON=1,
		DACF_ON=1,
		Select_Input=SQUID_interne,
		Bias_Enabled=1,
		Feedback_Enabled=1,
		Bias_Slope_Speed=2,
		Bias_Truncation=BIAS_trunc,
		Feedback_Truncation=FBCK_trunc,
		Compensation_Gain=FBCK_gain,
		Feedback_Reverse=0,
		Wait_for_relock=7,  // (0..7)
		Delock_level=0x7FF  // (maximum positive value)
		)
	configure_DEMUX_channel(Channel_ID, Channel_0_conf)

	// Loading the pulse shape in the FPGA
	fake_pulse_timescale=load_pulse(PixelType)

	// Measurement of gain bandwidth product
	if (DoGBW) {
		ScanGBW(Channel_ID, Default_amp/2, Gain, FREQtab[test_pix_index])}
	
	// Configuration of the DEMUX firmware (pixels)
	configure_DEMUX_pixels(Channel_ID, Ncarriers, Default_amp, Gain, FREQtab, PHIItab, test_pix_index, amp_pixel_test, Test_pix_only, NeighbourPix_Off)

	if (openloop) {
		switch_to_openloop(Channel_ID, Gain)}

	//  Start DEMUX
	sendStartDREChannels(3)
	waitMs(1000)            // Wait for the ramp

	// Measurement of the data dumps
	mk_dumps(Channel_ID, 1000)

	// Measurement of one DDS output dump (for test only)
	//mk_dumps_DDSout(1000)

	// Measurement of IQ files for spectra characterisation
	if (DoScienceSpectra) {
	mk_science_data_files(Channel_ID, nbr_spectra, spectra_duration_ms, DoScienceSpectra20Msps)}

	// Checking pulse shape on different signals 
	check_pulses(Channel_ID, ModulationRatio, fake_pulse_timescale)

	if (DoEnergyResol){
	// Measurement of energy resolution
	mk_energy_resol_tst(Channel_ID, ER_nbr_pulses_calib, ER_nbr_pulses_meas, ER_nbr_files, ModulationRatio, Threshold, saveIQ, fake_pulse_timescale)}

	if (DoDelockTst){
	delock_tst(Channel_ID,Channel_0_conf,fake_pulse_timescale,test_pix_index)}

	Stop_HK_collection()
	saveLogToBackupDir("scriptlog.txt")
	sendStopSession()

	onAbortScript()

	print("Processing data ...")
	output = copyDirToBackupDirAndExecuteBat("..\\..\\SCRIPTS_PYTHON\\demux-perfs-py",".\\SCRIPTS_PYTHON\\demux-perfs-py","python-perfs.bat")
	addToFile(output)

	print("Compressing data ...")
	zipData()

	print("End of session " + session_name)
}

////////////////////////////////////////////////////////////////////////////////
// Functions definitions
////////////////////////////////////////////////////////////////////////////////

function configure_DEMUX_channel(Channel_ID, conf)
// This function configures the channels parameters of the DEMUX firmware
{
	//// Channel settings
	Channel_CMD(
		Channel_id=Channel_ID,
		Loop_Control=conf.Loop_Control,
		StartStop=conf.StartStop,
		Nonlinear_ON=conf.Nonlinear_ON,
		Manual_Delock=conf.Manual_Delock,
		Delock_ON=conf.Delock_ON,
		ADC_ON=conf.ADC_ON,
		DACB_ON=conf.DACB_ON,
		DACF_ON=conf.DACF_ON,
		Select_Input=conf.Select_Input,
		Bias_Enabled=conf.Bias_Enabled,
		Feedback_Enabled=conf.Feedback_Enabled,
		Bias_Slope_Speed=conf.Bias_Slope_Speed,
		Bias_Truncation=conf.Bias_Truncation,
		Feedback_Truncation=conf.Feedback_Truncation,
		Compensation_Gain=conf.Compensation_Gain,
		Feedback_Reverse=conf.Feedback_Reverse,
		Wait_for_relock=conf.Wait_for_relock,
		Delock_level=conf.Delock_level
		)
}

////////////////////////////////////////////////////////////////////////////////
function configure_DEMUX_pixels(Channel_ID, Ncar, Amp, Gain, FREQtab, PHIItab, test_pix_index, amp_pixel_test, Test_pix_only, NeighbourPix_Off)
// This function configures the pixels' parameters of the DEMUX firmware for the test
// In this configuration 39 standard pixels and the test pixel are used.
// Input parameters:
//		Amp: (number)
//			the amplitude of the pixels
//		FREQtab: (array)
//			the values of the carriers
//		test_pix_index: (number)
//			the index of the standard pixel to be replaced by the test pixel
//			if -1 the test pixel is switched off
{
	Reset_All_Configs(0)
	if (Test_pix_only){
		print("Standard pixels switched off")
		Reset_All_Configs(Channel_ID)
	} else {
		print("Standard pixels switched on")
		for(var Pixel_ID=0;Pixel_ID<Ncar;Pixel_ID++)
		{
			Set_Pixel_Config(
				Pixel_ID=Pixel_ID,
				PHI_Delay=-1,
				PHI_Rotate=0,
				Gain_BBFB=Gain,
				Bias_Amplitude=Amp,
				Frequency=FREQtab[Pixel_ID],
				PHI_Initial=PHIItab[Pixel_ID]
				)
		}
	}

	////// Test pixel's settings
	Amp_test=Amp
	Freq_test=FREQtab[test_pix_index]
	Gain_test=Gain
	PhiIdeg_test = PHIItab[test_pix_index]
	PhiC_Testdeg = Get_PhiC(Freq_test)

	if (test_pix_index==-1) // switching test pixel off
	{
		print("switching test pixel off")
		Amp_test = 0
		Gain_test = 0
		Freq_test = 0
	}
	else
	{
		// Switch off the pixel where we will place the test pixel 
		print("switching standard pixel ", test_pix_index, " off")
		Set_Pixel_Off(test_pix_index)
	}

	Set_Pixel_Config(
		Pixel_ID=40,
		PHI_Delay=PhiC_Testdeg,
		PHI_Rotate=0,
		Gain_BBFB=Gain_test,
		Bias_Amplitude=Amp_test,
		Frequency=Freq_test,
		PHI_Initial=PhiIdeg_test
		)
	Set_TestPixel_ExtraCommands(
		modulation_freq=0,
		pulse_timescale=-1,
		pulse_amplitude=-1,
		pulse_start=-1,
		sw2=0,  // Feedback
		sw1=0,  // Closed loop
		modulation_amplitude=0
		)

	if (NeighbourPix_Off) // switching test pixel neighbours off
	{
			if (test_pix_index>0) { Set_Pixel_Off(test_pix_index-1)}
			if (test_pix_index<39) { Set_Pixel_Off(test_pix_index+1)}
	}
	// Apply the pixels configuration 
	Update_All_Configs(0)
	Apply_All_Configs(0)		
}

////////////////////////////////////////////////////////////////////////////////
function Start_HK_collection()
{
	sendStartDREHkAcquisition(1)	// periodic HK from ADC (to be stopped at the end of the sequence)
}

////////////////////////////////////////////////////////////////////////////////
function Stop_HK_collection()
{
	sendStopDREHkAcquisition()
}

////////////////////////////////////////////////////////////////////////////////
function mk_dumps(Channel_ID, duration_ms)
// This function makes BIAS, INPUT and FEEDBACK dumps
// Input parameters:
//		duration_ms: number
//			duration of each dump
{
	print(">>---------------------------------------------------------")
	print(">>  Measuring ADC and DACs data dumps")

	START_DUMP("IN-BIA",0,Channel_ID,"")
	waitMs(duration_ms)
	STOP_DUMP()
	
	START_DUMP("IN-FBK",0,Channel_ID,"")
	waitMs(duration_ms)
	STOP_DUMP()
	
	START_DUMP("COUNTR",0,Channel_ID,"")
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function mk_dumps_DDSout(duration_ms)
// This function makes a dump of one DDS output.
// This is only compatible with some test versions of the firmware
//		duration_ms: number
//			duration of each dump
{
	print(">>---------------------------------------------------------")
	print(">>  Measuring DDS output dump")

	Channel_ID = 1
	START_DUMP("IN-BIA", 0, Channel_ID, "DDSout1")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("IN-FBK", 0, Channel_ID, "DDSout2")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("BI-FBK", 0, Channel_ID, "DDSout3")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("IQ-TST", 0, Channel_ID, "DDSout4")
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function mk_science_data_files(Channel_ID, nbr_files, duration_ms, DoScienceSpectra20Msps)
// This function makes a series of science data files in order to measure the science data spectra
// Input parameters:
//		duration_ms: (number)
//			duration of each dump
//		nbr_spectra: (number)
//			the number of files to measure
{
	print("")
	print(">>---------------------------------------------------------")
	print(">>  Measurement of IQ data files for spectra measurement:")
	for(i=0;i<nbr_files;i++){
		//Dump IQ-ALL (all pixels filtered and data @ 156ksps)
		START_DUMP("IQ-ALL",i,Channel_ID,"_Science-Data")        // ( dump_type, i, channelID, filename_comment )
		waitMs(duration_ms)
		STOP_DUMP()
	}

	if (DoScienceSpectra20Msps){
		for(i=0;i<nbr_files;i++){
			//Dump IQ-TST (test pixel - data @ 20Msps)
			START_DUMP("IQ-TST",i,Channel_ID,"_Science-Data")        // ( dump_type, i, channelID, filename_comment )
			waitMs(duration_ms)
			STOP_DUMP()
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
function check_pulses(Channel_id, ModulationRatio,pulse_timescale)
// This function makes the measurements necessary to estimate the energy resolution
{
	print("")
	print(">>---------------------------------------------------------")
	print(">>  Measuring ADC and BIAS dumps with pulses")
	START_DUMP("IN-BIA" ,0,Channel_id,"_PULSE")
	sendPulsesAndWaitingForInjectionDone(Channel_id,10,50,ModulationRatio,pulse_timescale)
	STOP_DUMP()
	
	print("")
	print(">>---------------------------------------------------------")
	print(">>  Measuring ADC and FEEDBACK dumps with pulses")
	START_DUMP("IN-FBK" ,0,Channel_id,"_PULSE")
	sendPulsesAndWaitingForInjectionDone(Channel_id,10,50,ModulationRatio,pulse_timescale)
	STOP_DUMP()
	
	print("")
	print(">>---------------------------------------------------------")
	print(">>  Measuring IQ dumps with pulses")
	START_DUMP("IQ-ALL" ,0,Channel_id,"_PULSE")
	sendPulsesAndWaitingForInjectionDone(Channel_id,10,50,ModulationRatio,pulse_timescale)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function mk_energy_resol_tst(Channel_id,  Npulses_calib,  Npulses_meas, ER_nbr_files, ModulationRatio, Threshold, saveIQ, pulse_timescale)
// This function makes the measurements necessary to estimate the energy resolution
{	
	print("")
	print(">>---------------------------------------------------------")
	print(">>  Collecting data to build the EP filter")

	print("  - Measuring noise records...")
	sendStartDREDaqAcquisition(8) // IQ-ALL
	sendStartRecordBackup(2000,maDate()+"_mk_EP_filter_noise_record.fits")
	waitingForEndOfRecord()
	sendStopDumpedDataBackup()

	print("  - Measuring event records...")
	sendStartEventProcessor(0,"mk_EP_filter",Threshold)
	if (saveIQ)
		{
		print("        Saving IQ data")
		sendStartDumpedDataBackup2Filename(0, maDate()+"_EP_events.dat","")
		}		
	sendPulsesAndWaitingForInjectionDone(Channel_id,Npulses_calib,65,ModulationRatio,pulse_timescale)
	sendStopEventProcessor()
	sendStopDumpedDataBackup()

	print(">>  Measuring energy resolution")
	
	for (measure=0; measure<ER_nbr_files; measure++)
	{
		print("  - PULSE Measurements ("+(measure+1).toString()+" / "+ER_nbr_files.toString()+"): ")
		sendStartEventProcessor(0,"meas_E_resol",Threshold)
		if (saveIQ)
			{
			print("        Saving IQ data")
			sendStartDumpedDataBackup2Filename(0, maDate()+"_EP_measure.dat","")
			}		
		sendPulsesAndWaitingForInjectionDone(Channel_id,Npulses_meas,65,ModulationRatio,pulse_timescale)
		sendStopEventProcessor()
		sendStopDumpedDataBackup()
	}
	sendStopDREDaqAcquisition()
}

////////////////////////////////////////////////////////////////////////////////
function delock_tst(Channel_id,channel_conf,test_pix_index,PixelType) {

	pulse_amp_pourcent_delock_limit=20
	pulse_amp_pourcent_for_delock=90

	print("")
	print(">>---------------------------------------------------------")
	print(">>  Testing Anti-delock...")

	print("  - Activating non-linear input module...")
	channel_conf.Nonlinear_ON=1
	configure_DEMUX_channel(Channel_id, channel_conf)

	// Loading a pulse shape with a fast rise in the FPGA
	print("  - Loading a pulse shape with a fast rise...")
	timescale=load_pulse("delock")

	print("")
	print(">>---------------------------------------------------------")
	print(">>  Measuring INPUT before and after non linear module")

	print("  - Starting DRE-DEMUX...")
	channel_conf.StartStop=1
	configure_DEMUX_channel(Channel_id, channel_conf)  
	waitMs(500) // wait end of ramp

	START_DUMP("IN--NL" ,0,Channel_id,"_NL-carac_nodelock")
	sendPulsesAndWaitingForInjectionDone(Channel_id,1,50,pulse_amp_pourcent_delock_limit,timescale)
	STOP_DUMP()

	START_DUMP("IN--NL" ,0,Channel_id,"_NL-carac_delock")
	sendPulsesAndWaitingForInjectionDone(Channel_id,1,50,pulse_amp_pourcent_delock_limit+10,timescale)
	STOP_DUMP()

	print("  - Stopping DRE-DEMUX...")
	channel_conf.StartStop=0
	configure_DEMUX_channel(Channel_id, channel_conf)  



	print("")
	print("  - Testing a de-lock with anti-delock function ON...")

	print("  - Starting DRE-DEMUX...")
	channel_conf.StartStop=1
	configure_DEMUX_channel(Channel_id, channel_conf)  
	waitMs(500) // wait end of ramp

	print("  - Activating anti-delock...")
	channel_conf.Wait_for_relock=1  // (0..7)
	channel_conf.Delock_level=600  // (600 : close to max of sine function, 2047 : maximum positive value)
	channel_conf.Delock_ON=1
	configure_DEMUX_channel(Channel_id, channel_conf)  
	
	print("  - Sending 1 huge pulse")
	START_DUMP("IQ-ALL",i,Channel_ID,"_NL_anti-Delock--ON")        // ( dump_type, i, channelID, filename_comment )
	waitMs(300)
	sendPulsesAndWaitingForInjectionDone(Channel_id,1,20,pulse_amp_pourcent_for_delock,timescale)
	waitMs(300)
	STOP_DUMP()

	print("  - Stopping DRE-DEMUX...")
	channel_conf.StartStop=0
	configure_DEMUX_channel(Channel_id, channel_conf)  

	
	print("")
	print("  - Testing a de-lock with anti-delock function OFF...")

	print("  - Starting DRE-DEMUX...")
	channel_conf.StartStop=1
	configure_DEMUX_channel(Channel_id, channel_conf)  
	waitMs(500) // wait end of ramp

	print("  - De-activating anti-delock...")
	channel_conf.Delock_ON=0		// anti-delock off
	configure_DEMUX_channel(Channel_id, channel_conf)  

	print("  - Sending 1 huge pulse")
	START_DUMP("IQ-ALL",i,Channel_ID,"_NL_anti-Delock-OFF")        // ( dump_type, i, channelID, filename_comment )
	waitMs(300)
	sendPulsesAndWaitingForInjectionDone(Channel_id,1,20,pulse_amp_pourcent_for_delock,timescale)
	waitMs(300)
	STOP_DUMP()
	
	print("  - Stopping DRE-DEMUX...")
	channel_conf.StartStop=0
	print("  - De-activating the anti-delock function...")
	channel_conf.Delock_ON=0
	print("  - De-ctivating non-linear input module...")
	channel_conf.Nonlinear_ON=0
	configure_DEMUX_channel(Channel_id, channel_conf)

	// Re-loading the initial pulse shape in the FPGA
	fake_pulse_timescale=load_pulse(PixelType)
}
	
////////////////////////////////////////////////////////////////////////////////
function switch_to_openloop(Channel_ID, gain, channel_conf)
{
	print("")
	print(">>---------------------------------------------------------")
	print(">>  Switching to Open loop configuration...")

	// Switching standard pixels OFF
	Reset_All_Configs_except_test_pixel(Channel_ID)

	// Switching test pixel ON
	Set_Pixel_Config(
		Pixel_ID=40,
		PHI_Delay=-1,
		PHI_Rotate=-1,
		Gain_BBFB=gain,
		Bias_Amplitude=255,
		Frequency=-1,
		PHI_Initial=-1
		)

	// configuring internal switches
	Set_TestPixel_ExtraCommands(
		modulation_freq=0,
		pulse_timescale=0,
		pulse_amplitude=0,
		pulse_start=0,
		sw2=0,
		sw1=1,  // open loop
		modulation_amplitude=0
		)
		
	channel_conf.DACF_ON=0
	channel_conf.Feedback_Enabled=0
	configure_DEMUX_channel(Channel_ID, channel_conf)

	Update_All_Configs(channelId=Channel_ID)
	Apply_All_Configs(channelId=Channel_ID)		

	//Doing a Dump IQ-TST (test pixel - data @ 20Msps)
	sendStartDREChannels(3)
	waitMs(1000)

	START_DUMP("IQ-TST",i,Channel_ID,"_Open_Loop")        // ( dump_type, i, channelID, filename_comment )
	waitMs(500)
	STOP_DUMP()
	
	waitMs(500)
	START_DUMP("IQ-ALL",i,Channel_ID,"_Open_Loop")        // ( dump_type, i, channelID, filename_comment )
	waitMs(500)
	STOP_DUMP()

	sendStopDREChannels(3)
}

////////////////////////////////////////////////////////////////////////////////
function clean_stop()
{
	print(">>---------------------------------------------------------")
	sendStopDREPulses()
	sendStopEventProcessor()
	sendStopDREHkAcquisition()
	sendStopDREChannels(3)
	sendStopDumpedDataBackup()
}

////////////////////////////////////////////////////////////////////////////////
function onAbortScript()
// This function is called when clicking on the "Abort" button
// It is used to abort the setup in a proper way
{
	clean_stop()
	sendStopSession()
}

////////////////////////////////////////////////////////////////////////////////
