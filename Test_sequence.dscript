include("./Tools.dscript")
include("./frequency_sets.dscript")

////////////////////////////////////////////////////////////////////////////////
// Test sequence
////////////////////////////////////////////////////////////////////////////////
function test_sequence(
	session_name,
	session_comment,
	operator_name,
	Channel_ID,
	Default_amp,
	test_pix_index,
	amp_pixel_test,
	SQUID_interne,
	Gain,
	BIAS_trunc,
	FBCK_trunc,
	FBCK_gain,
	Fgridratio,
	dacMode,
	Spread,
	Npix,
	FS,
	DoGBW,
	DoScienceSpectra,
	nbr_spectra,
	spectra_duration_ms,
	DoEnergyResol,
	ER_nbr_pulses_meas,
	Threshold,
	ModulationRatio,
	saveIQ,
	Test_pix_only
	)
// This function makes one test sequence for a set of parameters
{
	// Opening the session
	sendStartSession(session_name, session_comment)
	// Saving test parameters in a file
	setAndMemorize( "session_name"			, session_name)
	setAndMemorize( "session_comment"		, session_comment)
	setAndMemorize( "operator_name"			, operator_name)
	setAndMemorize( "Channel_ID"			, Channel_ID)
	setAndMemorize( "Default_amp"			, Default_amp)
	setAndMemorize( "test_pix_index"		, test_pix_index)
	setAndMemorize( "amp_pixel_test"		, amp_pixel_test)
	setAndMemorize( "SQUID_interne"		, SQUID_interne)
	setAndMemorize( "Gain"					, Gain)
	setAndMemorize( "BIAS_trunc"			, BIAS_trunc)
	setAndMemorize( "FBCK_trunc"			, FBCK_trunc)
	setAndMemorize( "FBCK_gain"			, FBCK_gain)
	setAndMemorize( "Fgrid"					, FS/Fgridratio)
	setAndMemorize( "dacMode"				, dacMode)
	setAndMemorize( "Spread"				, Spread )
	setAndMemorize( "Npix"					, Npix )	// Defined in the script DRE_Tools_REFERENCE
	setAndMemorize( "FS"					, FS)		// Defined in the script DRE_Tools_REFERENCE
	setAndMemorize( "DoGBW"					, DoGBW)
	setAndMemorize( "DoScienceSpectra"		, DoScienceSpectra)
	setAndMemorize( "nbr_spectra"			, nbr_spectra)
	setAndMemorize( "spectra_duration_ms"	, spectra_duration_ms)
	setAndMemorize( "ER_nbr_pulses_meas"	, ER_nbr_pulses_meas)
	setAndMemorize( "Threshold"	, Threshold)
	setAndMemorize( "ModulationRatio"	, ModulationRatio)
	setAndMemorize( "saveIQ"	, saveIQ)
	setAndMemorize( "Test_pix_only"	, Test_pix_only)

	copyFileToBackupDir(getEGSEDirectory()+"\\parametersTF.dispatcher","HK\\parametersTF.dispatcher")  // copy HK limits
	
	getLatestValue("DISP_BackupsCurrentDirectory")
	mkpath(DISP_BackupsCurrentDirectory+"\\SCRIPTS_GSE\\demux-perfs-js")
	copyFileToBackupDir(".\\Launcher.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Launcher.dscript") // sauvegarde du script included
	copyFileToBackupDir(".\\Tools.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Tools.dscript") // sauvegarde du script included
	copyFileToBackupDir(".\\Startup.dscript","\\SCRIPTS_GSE\\demux-perfs-js\\Startup.dscript") // sauvegarde du script de demarrage included
	copyFileToBackupDir(__FILE__,"\\SCRIPTS_GSE\\demux-perfs-js\\"+__FILE__.split("/").pop()) // sauvegarde du script courant
	copyDirToBackupDir(getEGSEDirectory()+"\\EP",".\\EP_PARAMETERS")	

	saveMemorizedParametersToBackupDir("SCRIPTS_GSE\\demux-perfs-js\\"+__FILE__.split("/").pop().split(".")[0]+"_PARAMETERS.txt")
	
	// Computing the carrier frequencies
	carriers_param=carrier_freq2(Fgridratio, Npix)
	//carriers_param = carrier_freq(Spread, Fgrid, Npix)
	FREQtab=carriers_param.FREQtab
	PHIItab=carriers_param.PHIItab
	
	// Resetting the DEMUX firmware
	DRE_resetAll()

	// Measurement of housekeepings
	Start_HK_collection()

	// Configuration of the DEMUX firmware (channels)
	configure_DEMUX_channel(Channel_ID, SQUID_interne, BIAS_trunc, FBCK_gain, FBCK_trunc)

	// Measurement of gain bandwidth product
	if (DoGBW) {
		ScanGBW(Channel_ID, Default_amp, Gain, FREQtab[test_pix_index])}
	
	// Configuration of the DEMUX firmware (pixels)
	configure_DEMUX_pixels(Channel_ID, Default_amp, Gain, FREQtab, PHIItab, test_pix_index, amp_pixel_test, Test_pix_only)

	//  Start DEMUX
	sendStartDREChannels(3)
	waitMs(1000)            // Wait for the ramp

	// Measurement of the data dumps
	mk_dumps(Channel_ID, 1000)

	// Measurement of one DDS output dump (for test only)
	//mk_dumps_DDSout(1000)

	// Measurement of IQ files for spectra characterisation
	if (DoScienceSpectra) {
	mk_science_data_files(Channel_ID, nbr_spectra, spectra_duration_ms)}


	if (DoEnergyResol){
	// Measurement of energy resolution
	mk_energy_resol_tst(Channel_ID, ER_nbr_pulses_meas, ModulationRatio, Threshold, saveIQ)}

	Stop_HK_collection()
	saveLogToBackupDir("scriptlog.txt")
	sendStopSession()

	onAbortScript()

	print("Processing data ...")
	output = copyDirToBackupDirAndExecuteBat("..\\..\\SCRIPTS_PYTHON\\demux-perfs-py",".\\SCRIPTS_PYTHON\\demux-perfs-py","python-perfs.bat")
	addToFile(output)

	print("Compressing data ...")
	zipData()

	print("End of session " + session_name)
}

////////////////////////////////////////////////////////////////////////////////
// Functions definitions
////////////////////////////////////////////////////////////////////////////////

function configure_DEMUX_channel(Channel_ID, SQUID_interne, BIAS_trunc, FBCK_gain, FBCK_trunc)
// This function configures the channels parameters of the DEMUX firmware
{
	//// Channel settings
	Channel_CMD(
		Channel_ID,			// Channel_id
		0,					// Loop_Control
		0,					// StartStop (don't touch, always STOP)
		0,					// Delock_ON (0 not active)
		1,					// ADC_ON
		1,					// DACB_ON
		1,					// DACF_ON
		SQUID_interne,		// Select_Input
		1,					// Bias_Enabled
		1,					// Feedback_Enabled
		2,					// Bias_Slope_Speed
		BIAS_trunc,			// Bias_Truncation
		FBCK_trunc,			// Feedback_Truncation
		FBCK_gain,				// Compensation_Gain (32767 => unitary gain)
		0,					// Feedback_Reverse
		7,				// Wait for relock (0..7)
		0x7FF			// Delock_level (maximum positive value)
		)
}

////////////////////////////////////////////////////////////////////////////////
function configure_DEMUX_pixels(Channel_ID, Amp, Gain, FREQtab, PHIItab, test_pix_index, amp_pixel_test, Test_pix_only)
// This function configures the pixels' parameters of the DEMUX firmware for the test
// In this configuration 39 standard pixels and the test pixel are used.
// Input parameters:
//		Amp: (number)
//			the amplitude of the pixels
//		FREQtab: (array)
//			the values of the carriers
//		test_pix_index: (number)
//			the index of the standard pixel to be replaced by the test pixel
//			if -1 the test pixel is switched off
{
	if (Test_pix_only){
		print("Standard pixels switched off")
		Reset_All_Configs()
	} else {
		print("Standard pixels switched on")
		for(var Pixel_ID=0;Pixel_ID<Npix;Pixel_ID++)
		{
			Set_Pixel_Config(
				Pixel_ID,		// Pixel_ID
				-1,				// PHI_Delay (degree) (Phi_C)
				0,				// Test_PHI_Rotate (degree)
				Gain,			// Gain_BBFB
				Amp,			// Bias_Amplitude
				FREQtab[Pixel_ID],	// Frequency
				PHIItab[Pixel_ID]	// Test_PHI_Initial (degree)
				)
		}
	}

	////// Test pixel's settings
	// Frequency
	Freq_Test = FREQtab[test_pix_index]
	// Initial Phase
	PhiIdeg = PHIItab[test_pix_index]
	// Correction Phase
	PhiC_Testdeg = Get_PhiC(Freq_Test)
	if (test_pix_index==-1) // switching test pixel off
	{
		print("switching test pixel off")
		amp_pixel_test = 0
		Gain = 0
		Freq_Test = 0
	}
	else
	{
		// Switch off the pixel where we will place the test pixel 
		print("switching standard pixel ", test_pix_index, " off")
		Set_Pixel_Off(test_pix_index)
	}

	// Apply the configuration of the standard pixels
	Update_All_Configs(0)
	Apply_All_Configs(0)

	Test_Pixel_CMD(
		Channel_ID,
		//Math.round((PhiC_Testdeg+70)*Math.pow(2,8)/360),		// Test_PHI_Delay (degree) to test a non optimal value
		Math.round(PhiC_Testdeg*Math.pow(2,8)/360),		// Test_PHI_Delay (degree)
		Math.round(0*Math.pow(2,8)/360),				// Test_PHI_Rotate (degree)
		Math.round(PhiIdeg*Math.pow(2,12)/360),			// Test_PHI_Initial (degree)
		Gain,											// Test_Gain_BBFB
		amp_pixel_test,									// Test_Bias_Amplitude
		Math.round(Freq_Test*Math.pow(2,20)/FS),		// Increment
		0,												// Test_Bias_Modulation_Frequency (Hz)
		0,												// Test_Bias_Modulation_Amplitude (necessarily lower than "Test_Bias_Amplitude")
		0,												// SW2
		0,									// SW1
		0,									// Pulse_timescale
		0,									// Pulse_Amplitude
		0									// Send_Pulse
		)
}

////////////////////////////////////////////////////////////////////////////////
function Start_HK_collection()
{
	sendStartDREHkAcquisition(1)	// periodic HK from ADC (to be stopped at the end of the sequence)
}

////////////////////////////////////////////////////////////////////////////////
function Stop_HK_collection()
{
	sendStopDREHkAcquisition()
}

////////////////////////////////////////////////////////////////////////////////
function mk_dumps(Channel_ID, duration_ms)
// This function makes BIAS, INPUT and FEEDBACK dumps
// Input parameters:
//		duration_ms: number
//			duration of each dump
{
	print(">>---------------------------------------------------------")
	print(">>- Measuring ADC and DACs data dumps")

	START_DUMP("IN-BIA",0,Channel_ID,"")
	waitMs(duration_ms)
	STOP_DUMP()
	
	START_DUMP("IN-FBK",0,Channel_ID,"")
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function mk_dumps_DDSout(duration_ms)
// This function makes a dump of one DDS output.
// This is only compatible with some test versions of the firmware
//		duration_ms: number
//			duration of each dump
{
	print(">>---------------------------------------------------------")
	print(">>- Measuring DDS output dump")

	Channel_ID = 1
	START_DUMP("IN-BIA", 0, Channel_ID, "DDSout1")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("IN-FBK", 0, Channel_ID, "DDSout2")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("BI-FBK", 0, Channel_ID, "DDSout3")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("IQ-TST", 0, Channel_ID, "DDSout4")
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function mk_science_data_files(Channel_ID, nbr_files, duration_ms)
// This function makes a series of science data files in order to measure the science data spectra
// Input parameters:
//		duration_ms: (number)
//			duration of each dump
//		nbr_spectra: (number)
//			the number of files to measure
{
	print(">>---------------------------------------------------------")
	print(">>- Measurement of IQ data files for spectra measurement:")
	for(i=0;i<nbr_files;i++){
		//Dump IQ-ALL (all pixels filtered and data @ 156ksps)
		START_DUMP("IQ-ALL",i,Channel_ID,"_Science-Data")        // ( dump_type, i, channelID, filename_comment )
		waitMs(duration_ms)
		STOP_DUMP()
	}
		
	for(i=0;i<nbr_files;i++){
		//Dump IQ-TST (test pixel - data @ 20Msps)
		START_DUMP("IQ-TST",i,Channel_ID,"_Science-Data")        // ( dump_type, i, channelID, filename_comment )
		waitMs(duration_ms)
		STOP_DUMP()
	}
}

////////////////////////////////////////////////////////////////////////////////
function mk_energy_resol_tst(Channel_id,  Npulses_meas, ModulationRatio, Threshold, saveIQ)
// This function makes the measurements necessary to estimate the energy resolution
{
	print(">>---------------------------------------------------------")
	print(">>- Measuring ADC dumps with pulses")
	START_DUMP("IN-BIA" ,0,Channel_id,"_PULSE")
	sendPulsesAndWaitingForInjectionDone(Channel_id,20,50,ModulationRatio)
	STOP_DUMP()
	
	print(">>---------------------------------------------------------")
	print("  - Measuring energy resolution")
	print("  - PULSE Measurements: ")
//	sendConfigureEventProcessor(1,Threshold) // => Switch EP on
	sendStartEventProcessor(1000,"check_resol",Threshold)
	sendStartDREDaqAcquisition(8) // IQ-ALL
	if (saveIQ)
		{
		print("Saving IQ data")
		sendStartDumpedDataBackup(0)
		}

	sendPulsesAndWaitingForInjectionDone(Channel_id,Npulses_meas,70,ModulationRatio)

	sendStopEventProcessor()
	sendStopDumpedDataBackup()
	sendStopDREDaqAcquisition()
}

////////////////////////////////////////////////////////////////////////////////
function clean_stop()
{
	sendStopEventProcessor()
	//sendConfigureEventProcessor(0,65535)
	sendStopDREHkAcquisition()
	sendStopDREChannels(3)
	sendStopDumpedDataBackup()
}

////////////////////////////////////////////////////////////////////////////////
function onAbortScript()
// This function is called when clicking on the "Abort" button
// It is used to abort the setup in a proper way
{
	clean_stop()
	sendStopSession()
}

////////////////////////////////////////////////////////////////////////////////
