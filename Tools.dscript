//////////////////////////////////////////////////////////////////////////////////
/*
Javascript library for DRE-DEMUX prototype performances characterization
========================================================================

Developped by: A. Clenet / L. Ravera

Project: Athena X-IFU / DRE-DEMUX

This library contains basic functions to configure the DRE-DEMUX prototype
*/

/////////////////////// Constants ///////////////////////
getLatestValue("DRE_FS")
const FS	= DRE_FS
const Npix	= 40
const WAITING_TIME = 10;
const TARGET = 0	 // FPA_simulator = 0; SQUID_emulator = 1;
const Select_Input = 0

///////////////// Hardawre parameters ////////////////////
// SPI
const SPI_write_ON  = 1*Math.pow(2,5)
const SPI_write_OFF = 0*Math.pow(2,5)
// CDCM7005
const CDCM7005_SPI_ch = 4*Math.pow(2,0)
//const CDCM7005_SPI_Word0 =

// const DAC AD9726 modes
FACTORY_CALIBRATED = 0
SELF_CALIBRATED = 1
UNCALIBRATED = 2


//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_General_CMD(Start_Sending_TM,Select_TM,Start_Sending_HK,Select_HK)
// 4 inputs
{
	Start_Sending_TM_l = Math.pow(2,7);
	Start_Sending_TM_mask	= 0x1;
	Select_TM_l = Math.pow(2,3);
	Select_TM_mask = 0xF;
	Start_Sending_HK_l = Math.pow(2,2);
	Start_Sending_HK_mask = 0x1;
	Select_HK_l = Math.pow(2,0);
	Select_HK_mask = 0x3;
	
	address = 0;
	value = (Start_Sending_TM & Start_Sending_TM_mask) * Start_Sending_TM_l
	+ (Select_TM & Select_TM_mask) * Select_TM_l
	+ (Start_Sending_HK & Start_Sending_HK_mask) * Start_Sending_HK_l
	+ (Select_HK & Select_HK_mask) * Select_HK_l;
	sendConfigureDREOneRegister(address,value)
	waitMs(WAITING_TIME)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function Channel_CMD(Channel_id,Loop_Control,StartStop,Nonlinear_ON,Manual_Delock,Delock_ON,ADC_ON,DACB_ON,DACF_ON,Select_Input,Bias_Enabled,Feedback_Enabled,Bias_Slope_Speed,Bias_Truncation,Feedback_Truncation,Compensation_Gain,Feedback_Reverse,Wait_for_relock,Delock_level)
// 18inputs
{
	Loop_Control_l = Math.pow(2,28);
	Loop_Control_mask = 0xF;
	StartStop_l = Math.pow(2,16);
	StartStop_mask = 0x1;
	Nonlinear_ON_l = Math.pow(2,15);
	Nonlinear_ON_mask = 0x1;
	Manual_Delock_l = Math.pow(2,14);
	Manual_Delock_mask = 0x1;
	Delock_ON_l = Math.pow(2,13);
	Delock_ON_mask = 0x1;
	ADC_ON_l = Math.pow(2,12);
	ADC_ON_mask = 0x1;
	DACB_ON_l = Math.pow(2,11);
	DACB_ON_mask = 0x1;
	DACF_ON_l = Math.pow(2,10);
	DACF_ON_mask = 0x1;
	Select_Input_l = Math.pow(2,8);
	Select_Input_mask = 0x3;
	Bias_Enabled_l = Math.pow(2,7);
	Bias_Enabled_mask = 0x1;
	Feedback_Enabled_l = Math.pow(2,6);
	Feedback_Enabled_mask = 0x1;
	Bias_Slope_Speed_l = Math.pow(2,4);
	Bias_Slope_Speed_mask	= 0x3;
	Bias_Truncation_l = Math.pow(2,2);
	Bias_Truncation_mask = 0x3;
	Feedback_Truncation_l = Math.pow(2,0);
	Feedback_Truncation_mask = 0x3;
	
	address_1 = 1 + Channel_id*(2+2*Npix+4);
	value_1 = (Loop_Control & Loop_Control_mask) * Loop_Control_l
	+ (StartStop & StartStop_mask) * StartStop_l
	+ (Nonlinear_ON & Nonlinear_ON_mask) * Nonlinear_ON_l
	+ (Manual_Delock & Manual_Delock_mask) * Manual_Delock_l
	+ (Delock_ON & Delock_ON_mask) * Delock_ON_l
	+ (ADC_ON & ADC_ON_mask) * ADC_ON_l
	+ (DACB_ON & DACB_ON_mask) * DACB_ON_l
	+ (DACF_ON & DACF_ON_mask) * DACF_ON_l
	+ (Select_Input & Select_Input_mask) * Select_Input_l
	+ (Bias_Enabled & Bias_Enabled_mask) * Bias_Enabled_l
	+ (Feedback_Enabled & Feedback_Enabled_mask) * Feedback_Enabled_l
	+ (Bias_Slope_Speed & Bias_Slope_Speed_mask) * Bias_Slope_Speed_l
	+ (Bias_Truncation & Bias_Truncation_mask) * Bias_Truncation_l
	+ (Feedback_Truncation & Feedback_Truncation_mask) * Feedback_Truncation_l;
	sendConfigureDREOneRegister(address_1, value_1);
	
	
	Compensation_Gain_l = Math.pow(2,16);
	Compensation_Gain_mask = 0xFFFF;
	Feedback_Reverse_l = Math.pow(2,15);
	Feedback_Reverse_mask	= 0x1;
	Wait_for_relock_l = Math.pow(2,12);
	Wait_for_relock_mask = 0x7;
	Delock_level_l = Math.pow(2,0);
	Delock_level_mask = 0x7FF;
	
	address_2 = address_1 + 1;
	value_2 = (Compensation_Gain & Compensation_Gain_mask) * Compensation_Gain_l
	+ (Feedback_Reverse & Feedback_Reverse_mask) * Feedback_Reverse_l
	+ (Wait_for_relock & Wait_for_relock_mask) * Wait_for_relock_l
	+ (Delock_level & Delock_level_mask) * Delock_level_l;
	sendConfigureDREOneRegister(address_2, value_2);
}

//----------------------------------------------------------------------------------------------------------------------------
function define_Channel_conf(Loop_Control,StartStop,Nonlinear_ON,Manual_Delock,Delock_ON,ADC_ON,DACB_ON,DACF_ON,Select_Input,Bias_Enabled,Feedback_Enabled,Bias_Slope_Speed,Bias_Truncation,Feedback_Truncation,Compensation_Gain,Feedback_Reverse,Wait_for_relock,Delock_level)
{
	return {
		Loop_Control:Loop_Control,
		StartStop:StartStop,
		Nonlinear_ON:Nonlinear_ON,
		Manual_Delock:Manual_Delock,
		Delock_ON:Delock_ON,
		ADC_ON:ADC_ON,
		DACB_ON:DACB_ON,
		DACF_ON:DACF_ON,
		Select_Input:Select_Input,
		Bias_Enabled:Bias_Enabled,
		Feedback_Enabled:Feedback_Enabled,
		Bias_Slope_Speed:Bias_Slope_Speed,
		Bias_Truncation:Bias_Truncation,
		Feedback_Truncation:Feedback_Truncation,
		Compensation_Gain:Compensation_Gain,
		Feedback_Reverse:Feedback_Reverse,
		Wait_for_relock:Wait_for_relock,
		Delock_level:Delock_level
	}
}
//----------------------------------------------------------------------------------------------------------------------------
function Get_PhiC(Freq)
// Computes the correction phase for a specific carrier frequency
{
	getLatestValue("SCANFB_outputCoeffs")                // Request the ScanFB coef to the GSE
	for (var i=0, PhiC=0; i<SCANFB_outputCoeffs.length; i++)
	{
		PhiC+=SCANFB_outputCoeffs[i]*Math.pow(Freq,i)
	}
	PhiC = -PhiC + 180										// apply the Antoine's relation defined in eq. (6.8) in page 158 of the Bible
    return(PhiC%360)
}

//----------------------------------------------------------------------------------------------------------------------------
function Get_PhiI_from_index(index, Npix)
// Computes the initial phase for a specific carrier frequency
{
	PhiI = (Math.PI*index*index/Npix)*180/Math.PI	// apply the Schroeder's minus relation defined in eq (6.10) in page 163 of the Bible
	if(PhiI >= 360) PhiI = PhiI-(360*parseInt(PhiI/360))	// wrap PhiI in the range [0-360]
    return(PhiI)
}

//----------------------------------------------------------------------------------------------------------------------------
function Get_PhiI_from_freq(Freq, Freq_max)
// Computes the initial phase for a specific carrier frequency
{
	PhiI = (Math.PI*Freq*Freq/Freq_max)*180/Math.PI	// apply the Schroeder's minus relation defined in eq (6.10) in page 163 of the Bible
	if(PhiI >= 360) PhiI = PhiI-(360*parseInt(PhiI/360))	// wrap PhiI in the range [0-360]
    return(PhiI)
}

//----------------------------------------------------------------------------------------------------------------------------
function get_operator_name()
{
	OperatorTab = ["", "Laurent", "Odile", "David", "Paul", "Bernard", "Wilfried", "Christophe"]
	OperatorId = getItem("Please, select the operator name:", OperatorTab)
	if (OperatorId == -1) {
		Operator_name = getText("Please, type the operator name:", "")
		} else {
		Operator_name = OperatorTab[OperatorId]
		}
	return(Operator_name)
}

//----------------------------------------------------------------------------------------------------------------------------
function get_session_name()
{
	session_name = getText("Please, type the session name:", "Default_session_name")
	return(session_name)
}

//----------------------------------------------------------------------------------------------------------------------------
function SendPulse(Channel_id, Pulse_timescale, Pulse_Amplitude, Send_Pulse)
// SW2, SW1 and Test_Bias_Modulation_Amplitude are not explicitely configured and hence are set to "0"
{
	Pulse_timescale_l = Math.pow(2,20);
	Pulse_Amplitude_l = Math.pow(2,12);
	Send_Pulse_l = Math.pow(2,11);
	
	address = 1 + Channel_id*(2+Npix*2+4) + 2 + 2*Npix + 3;
	value = Pulse_timescale*Pulse_timescale_l + Pulse_Amplitude*Pulse_Amplitude_l + Send_Pulse*Send_Pulse_l;
	sendConfigureDREOneRegister(address, value)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_resetAll()
// reset all DRE-DELUX parameters
{
	print("Clearing all registers..")
	DRE_General_CMD(
		Start_Sending_TM=0,
		Select_TM=0,
		Start_Sending_HK=0,
		Select_HK=0
		)
	Channel_CMD(
		Channel_id=0,
		Loop_Control=0,
		StartStop=0,
		Nonlinear_ON=0,
		Manual_Delock=0,
		Delock_ON=0,
		ADC_ON=0,
		DACB_ON=0,
		DACF_ON=0,
		Select_Input=0,
		Bias_Enabled=0,
		Feedback_Enabled=0,
		Bias_Slope_Speed=0,
		Bias_Truncation=0,
		Feedback_Truncation=0,
		Compensation_Gain=0,
		Feedback_Reverse=0,
		Wait_for_relock=0,
		Delock_level=0
		)
	Channel_CMD(
		Channel_id=1,
		Loop_Control=0,
		StartStop=0,
		Nonlinear_ON=0,
		Manual_Delock=0,
		Delock_ON=0,
		ADC_ON=0,
		DACB_ON=0,
		DACF_ON=0,
		Select_Input=0,
		Bias_Enabled=0,
		Feedback_Enabled=0,
		Bias_Slope_Speed=0,
		Bias_Truncation=0,
		Feedback_Truncation=0,
		Compensation_Gain=0,
		Feedback_Reverse=0,
		Wait_for_relock=0,
		Delock_level=0
		)
	Reset_All_Configs(channelId=0)
	Apply_All_Configs(channelId=0)
	//Reset_All_Configs(channelId=1)
	//Apply_All_Configs(channelId=1)
	waitMs(10)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_RESET_CONFIG_CDCM()
// only resets and configures the CDCM7005
{
	///// config_cdcm19p53MHz
	print("Config_CDCM_19.53MHz ..")
	sendConfigureDREOneRegister(0xAD,0x4)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x0028A060)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x24)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x4)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x0008803D)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x24)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x4)
	waitMs(10)
	
	getLatestValue("DRE_FirmwareId")
	
	if (DRE_FirmwareId >> 8 == 1) {
		print("Setting ADC and DACs clocks to 19.53MHz")
		sendConfigureDREOneRegister(0xAE,0xDA05B0A2)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,0x24)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,0x4)
		waitMs(10)
		} else {
		print("Setting ADC clock to 19.53MHz and DACs clocks to 78.125MHz")  //  (default)
		sendConfigureDREOneRegister(0xAE,0xDA0130A2)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,0x24)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,0x4)
		waitMs(10)
	}
	
	sendConfigureDREOneRegister(0xAE,0x00000027)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x24)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x4)
	waitMs(10)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_RESET_DAC_AD9726()
{
	///// AD9726 Reset
	print("Reset DAC AD9726 ...")
	sendConfigureDREOneRegister(0xAD,0x20000000)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_CONFIG_DACS_AD9726()
{
	// determination du mode DAC
	getLatestValue("DRE_DACMode")
	modeStr =  DRE_DACMode.toUpperCase()
	if (modeStr.indexOf("SELF")>=0)
	{
		dacMode = SELF_CALIBRATED
	}
	else if (modeStr.indexOf("UNCALIBRATED")>=0)
	{
		dacMode = UNCALIBRATED
	}
	else
	{
		dacMode = FACTORY_CALIBRATED
	}
	
	// configuration des DACs
	// AD9726_BIAS
	DRE_CONFIG_DAC_AD9726(dacMode,0x20)
	// AD9726_FEEDBACK
	DRE_CONFIG_DAC_AD9726(dacMode,0x21)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_CONFIG_DAC_AD9726(dacMode,dacSelection)
{
	sendConfigureDREOneRegister(0xAE,0x00000000)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,dacSelection)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00000260)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,dacSelection)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	sendConfigureDREOneRegister(0xAE,0x00000E00)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,dacSelection)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	
	DRE_CONFIG_DAC_AD9726_MODE(dacMode,dacSelection)
	
	sendConfigureDREOneRegister(0xAE,0x00001640)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,dacSelection)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_CONFIG_DAC_AD9726_MODE(dacMode,dacSelection)
{
	sendConfigureDREOneRegister(0xAE,0x00000F00)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,dacSelection)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x0)
	waitMs(10)
	
	if (dacMode == SELF_CALIBRATED)
	{
		print("Configuring DAC AD9726 to Self calibrated mode")
		sendConfigureDREOneRegister(0xAE,0x00000F40)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,dacSelection)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,0x0)
		waitMs(800)
	}
	else if (dacMode == UNCALIBRATED)
	{
		print("Configuring DAC AD9726 to Uncalibrated mode")
		sendConfigureDREOneRegister(0xAE,0x00000F01)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,dacSelection)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,0x0)
		waitMs(200)
	}
	else //  FACTORY_CALIBRATED
	{
		print("Configuring DAC AD9726 to Factory calibrated mode")
		sendConfigureDREOneRegister(0xAE,0x00000F10)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,dacSelection)
		waitMs(10)
		sendConfigureDREOneRegister(0xAD,0x0)
		waitMs(200)
	}
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_RESET_MMCM()
{
	///// FPGA MMCM Reset
	print("Reset FPGA MMCM ...")
	sendConfigureDREOneRegister(0xAD,0x80000000)
	waitMs(10)
	sendConfigureDREOneRegister(0xAD,0x00000000)
	waitMs(10)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_CLK_SELECT()
{
	///// CLOCK SELECT ON THE CLK provided by the DACF(ch1)
	print("CLK SWITCHED TO DACF (ch0)...")
	sendConfigureDREOneRegister(0xAD,0x40000000)
	waitMs(10)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_ADC1_DFSB(val)
{
	///// Sets DFSB=1 (ADC signed/unsigned)
	sendConfigureDREOneRegister(0xAD,(0x40000000+val*Math.pow(2,24)))//0x41000000
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_Startup()
// sequence required to startup the DRE-DEMUX
{
	DRE_resetAll()
	waitMs(100)
	DRE_RESET_CONFIG_CDCM()
	waitMs(100)
	DRE_RESET_DAC_AD9726()
	waitMs(100)
	DRE_CONFIG_DACS_AD9726()
	waitMs(100)
	DRE_RESET_MMCM()
	waitMs(100)
	DRE_CLK_SELECT()
	waitMs(100)
	DRE_ADC1_DFSB(0)
	waitMs(100)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function DRE_Stop()
// stop all channels and clear all paramaters
{
	sendStopDREChannels(3)
	DRE_resetAll()
}

//----------------------------------------------------------------------------------------------------------------------------
function waitingForEndOfScanFB(){
	_req = getNextValue("SCANFB_CommandedSteps,SCANFB_CurrentStep, SCANFB_outputCoeffs_0","chaque fois que SCANFB_CurrentStep sera mis a jour");
	do{
		waitingForNextValue(_req)
	}
	while (SCANFB_CommandedSteps != SCANFB_CurrentStep)
		abortOneRequest(_req)
}

//----------------------------------------------------------------------------------------------------------------------------
function ScanGBW(Channel_id, bias_Amp, BBFB_gain, Freq_Test){			// Scan GBW using the Test_pixel BIAS modulation in the channel configuration defined externally of this function
	print(">>---------------------------------------------------------")
	print(">>- GBW characterization")
	// Definition of frequencies to be used to characterize the BW before the decimation filter
	const MOD_FREQ1 		=
	[      10,        32,      100,       316,       1000,      3162,
		   10000,     31623,   100000,    316227,    1000000
	]

	// Definition of frequencies to be used to characterize the BW after the decimation filter
	const MOD_FREQ2 		=
	[      10,        30,        50,        70,        100,       147,
	190,       245,       316,       408,       527,       681,       880,
	1136,      1468,      1896,      2448,      3162,      4084,      5275,
	6813,      8799,      11365,     14678,    18957,     24484,     31623,
	40842,     52750,     65000,     80000,    100000,    125000,    140000,
	195574,    244844,    316228,    408424,    527500,    681292,    879923
	]

	N_PERIOD		= 20
	
	// Sets the amplitude of all the pixels to 0
	Reset_All_Configs(Channel_id)
	waitMs(500)

	///////////////////////// Test Pixel ////////////////////////////////
	PhiC_Testdeg = Get_PhiC(Freq_Test)
	
	// Setting the test pixel's configuration
	Set_Pixel_Config(
		Pixel_ID=40,  // test pixel ID
		PHI_Delay=PhiC_Testdeg,
		PHI_Rotate=0,
		Gain_BBFB=BBFB_gain,
		Bias_Amplitude=bias_Amp,
		Frequency=Freq_Test,
		PHI_Initial=0
		)

	// Apply the pixels' configurations
	Update_All_Configs(Channel_id)
	Apply_All_Configs(Channel_id)		

	sendStartDREChannels(3)
	waitMs(1000)		// wait to let the BBFB lock
	
	// sweep with different modulation frequencies and measures data before the LPF
	for(i=0;i<MOD_FREQ1.length;i++)
	{
		MOD_FREQ_REEL = Math.round(MOD_FREQ1[i]*Math.pow(2,24)/FS)
		Set_TestPixel_ExtraCommands(
			modulation_freq=MOD_FREQ_REEL,
			pulse_timescale=0,
			pulse_amplitude=0,
			pulse_start=0,
			sw2=0,  // Feedback
			sw1=0,  // Closed loop
			modulation_amplitude=255
			)
		// Apply the pixels' configurations
		Update_All_Configs(Channel_id)
		Apply_All_Configs(Channel_id)		

		file_size = Math.round(((FS/MOD_FREQ1[i])*32/8)*N_PERIOD/1024)	// File size as a function of the modulation frequency and the number of period to be aquired
		duration = (file_size*1e3*1.1/80e3)/1000
		print(MOD_FREQ1[i]+"Hz --> "+ (duration*1000).toFixed(3) +" ms   /  "+file_size+" ko")
		
		comment = "_GBW_" + (("0000000"+(Math.round(MOD_FREQ_REEL*FS/Math.pow(2,24))).toString()).slice(-7))+ "Hz_Gain" + Gain.toString()		
		dump_type = "IQ-TST"
		START_DUMP(dump_type,i,0,comment)        // ( dump_type, i, channelID, filename_comment )
		waitMs(file_size*1e3*1.1/80e3)
		STOP_DUMP()
		waitMs(100)
	}


	// sweep with different modulation frequencies and measures data after the LPF
	for(i=0;i<MOD_FREQ2.length;i++)
	{
		MOD_FREQ_REEL = Math.round(MOD_FREQ2[i]*Math.pow(2,24)/FS)
		Set_TestPixel_ExtraCommands(
			modulation_freq=MOD_FREQ_REEL,
			pulse_timescale=0,
			pulse_amplitude=0,
			pulse_start=0,
			sw2=0,  // Feedback
			sw1=0,  // Closed loop
			modulation_amplitude=255
			)
		// Apply the pixels' configurations
		Update_All_Configs(Channel_id)
		Apply_All_Configs(Channel_id)		

		file_size = Math.round(((FS/MOD_FREQ2[i])*32/8)*N_PERIOD/1024)	// File size as a function of the modulation frequency and the number of period to be aquired
		duration = (file_size*1e3*1.1/80e3)/1000
		print(MOD_FREQ2[i]+"Hz --> "+ (duration*1000).toFixed(3) +" ms   /  "+file_size+" ko")
		
		comment = "_GBW_" + (("0000000"+(Math.round(MOD_FREQ_REEL*FS/Math.pow(2,24))).toString()).slice(-7))+ "Hz_Gain" + Gain.toString()
		dump_type = "IQ-ALL"
		START_DUMP(dump_type,i,0,comment)        // ( dump_type, i, channelID, filename_comment )   
		waitMs(file_size*1e3*1.1/80e3)
		STOP_DUMP()
		waitMs(100)
	}
	
	// switch all the pixels off
	Reset_All_Configs(Channel_id)
	Apply_All_Configs(Channel_id)

	sendStopDREChannels(3)
}


///////////////// Pixels Configuration tables initialization //////////////////////////////
var t_Freq = new Array(Npix + 1);
var t_Amp = new Array(Npix+ 1);
var t_Gain = new Array(Npix+ 1);
var t_PhiC = new Array(Npix+ 1);
var t_PhiI = new Array(Npix+ 1);
var t_PhiR = new Array(Npix+ 1);
var t_command3 = -1;
var t_command4 = -1;
for(i=0;i<Npix+1;i++){
	t_Freq[i] = -1;
	t_Amp[i] = -1;
	t_Gain[i] = -1;
	t_PhiC[i] = -1;
	t_PhiI[i] = -1;
	t_PhiR[i] = -1;
}

//----------------------------------------------------------------------------------------------------------------------------
function Reset_All_Configs(channelId){
	for(i=0;i<Npix+1;i++){
		t_Freq[i] = 0;
		t_Amp[i]  = 0;
		t_Gain[i] = 0;
		t_PhiC[i] = 0;
		t_PhiI[i] = 0;
		t_PhiR[i] = 0;
	}
	t_command3 = 0
	t_command4 = 0
	sendConfigureDREPixelsBuffer(channelId,t_Freq,t_Amp,t_Gain,t_PhiC,t_PhiI,t_PhiR,t_command3,t_command4)
}

//----------------------------------------------------------------------------------------------------------------------------
function Reset_All_Configs_except_test_pixel(channelId){
	for(i=0;i<Npix;i++){
		t_Freq[i] = 0;
		t_Amp[i]  = 0;
		t_Gain[i] = 0;
		t_PhiC[i] = 0;
		t_PhiI[i] = 0;
		t_PhiR[i] = 0;
	}
	t_command3 = -1
	t_command4 = -1
	sendConfigureDREPixelsBuffer(channelId,t_Freq,t_Amp,t_Gain,t_PhiC,t_PhiI,t_PhiR,t_command3,t_command4)
}

//----------------------------------------------------------------------------------------------------------------------------
function Apply_All_Configs(channelId){
	sendDREPixelsBuffer(channelId)
	waitMs(50)			// Wait for the GSE sending time
}

//----------------------------------------------------------------------------------------------------------------------------
function Update_All_Configs(channelId){
	sendConfigureDREPixelsBuffer(channelId,t_Freq,t_Amp,t_Gain,t_PhiC,t_PhiI,t_PhiR,t_command3,t_command4)
	sendCalculatePhiCPixelsBuffer(channelId)
}

//----------------------------------------------------------------------------------------------------------------------------
function Set_Pixel_Config(Pixel_ID,PHI_Delay,PHI_Rotate,Gain_BBFB,Bias_Amplitude,Frequency,PHI_Initial){
	t_Freq[Pixel_ID] = Frequency;
	t_Amp[Pixel_ID] = Bias_Amplitude;
	t_Gain[Pixel_ID] = Gain_BBFB;
	t_PhiC[Pixel_ID] = PHI_Delay;
	t_PhiI[Pixel_ID] = PHI_Initial;
	t_PhiR[Pixel_ID] = PHI_Rotate;
}

//----------------------------------------------------------------------------------------------------------------------------
function Set_TestPixel_ExtraCommands(modulation_freq, pulse_timescale, pulse_amplitude, pulse_start, sw2, sw1, modulation_amplitude){

	modulation_freq_l= Math.pow(2,0);
	modulation_freq_mask= 0xFFFFFF;
	
	t_command3= (modulation_freq & modulation_freq_mask) * modulation_freq_l;

	pulse_timescale_l= Math.pow(2,20);
	pulse_timescale_mask= 0xF;
	pulse_amplitude_l= Math.pow(2,12);
	pulse_amplitude_mask= 0xFF;
	pulse_start_l= Math.pow(2,11);
	pulse_start_mask= 0x1;
	sw2_l= Math.pow(2,9);
	sw2_mask= 0x3;
	sw1_l= Math.pow(2,8);
	sw1_mask= 0x1;
	modulation_amplitude_l= Math.pow(2,0);
	modulation_amplitude_mask= 0xFF;
	
	t_command4= (pulse_timescale & pulse_timescale_mask) * pulse_timescale_l
	+ (pulse_amplitude & pulse_amplitude_mask) * pulse_amplitude_l
	+ (pulse_start & pulse_start_mask) * pulse_start_l
	+ (sw2 & sw2_mask) * sw2_l
	+ (sw1 & sw1_mask) * sw1_l
	+ (modulation_amplitude & modulation_amplitude_mask) * modulation_amplitude_l;
}

//----------------------------------------------------------------------------------------------------------------------------
function Set_Pixel_Off(Pixel_ID){
	t_Freq[Pixel_ID] = 0;
	t_Amp[Pixel_ID] = 0;
	t_Gain[Pixel_ID] = 0;
	t_PhiC[Pixel_ID] = -1;
	t_PhiI[Pixel_ID] = -1;
	t_PhiR[Pixel_ID] = 0;
}

//----------------------------------------------------------------------------------------------------------------------------
function Pixels_40_Simultaneous_Freq_Scan(Channel_id,CenterFreqTab,Span,Step,Amp,i_start){
	var i = i_start
	var Freq_List = ""
	
	Channel_CMD(
	Channel_id,			// Channel_id
	0,					//Loop_Control
	0,					//StartStop (don't touch, always STOP)
	0,					//DELOCK_ON
	0,					//MANUAL_DELOCK
	1,					//ADC_ON
	1,					//DACB_ON
	1,					//DACF_ON
	0,					//Select_Input
	1,					//Bias_Enabled
	1,					//Feedback_Enabled
	2,					//Bias_Slope_Speed
	3,					//Bias_Truncation
	3,					//Feedback_Truncation
	32767,				//Compensation_Gain (32767 => unitary gain)
	TARGET,				//Feedback_Reverse
	0x7,					// wait for relock				
	0x7FF				// delock_level
	)
	for(var k=0;k<Math.round(Span/Step);k++){
		Freq_List = ""
		for(var n=0;n<Npix;n++){
			var Freq = CenterFreqTab[n] - Span/2 + k*Step
			var PhiIdeg = (Math.PI*n*n/Npix)*180/Math.PI														// apply the Schroeder's relation defined in eq (6.10) in page 163 of the Bible
			
			Set_Pixel_Config(
			n,														// Pixel_ID --> +1 because the BBFB is "0" indexed for the moment
			-1,														// PHI_Delay (degree)
			0,														// Test_PHI_Rotate (degree)
			5,													// Gain_BBFB
			Amp,													// Bias_Amplitude
			Freq,													// Frequence
			PhiIdeg													// Test_PHI_Initial (degree)
			)
			
			Freq_List = Freq_List + Math.round(Freq).toString() +"\n"
		}
		Update_All_Configs(0)
		Apply_All_Configs(0)
		waitMs(1)
		sendStartDREChannels(3)
		if(k==0) waitMs(1000) // Wait for ramp-up
		////// Dump Info file ///////
		switchToFileContext(1)
		clearFileContent()
		addToFile(Freq_List)
		saveFileContent("C:/Xifustudio/Dump_Info_file.dumpinfo")
		
		var filename = (("000000" +(i).toString()).slice(-6))+ "_" + (Amp).toString()+ "AMP_" + "_40Pix-Simultaneous-FPA-freq-scan.dat"
		sendStopDREDaqAcquisition()							// To ensure that buffers are empty
		waitMs(1)
		sendStartDREDaqAcquisition(8) // Mode IQ 40 Pixels
		waitMs(1)
		sendStartDumpedDataBackup2Filename(10,filename,filename)
		waitMs(10)
		i+=1
	}
}

//----------------------------------------------------------------------------------------------------------------------------
function Pixels_40_Simultaneous_IV_Scan(CenterFreqTab,AmpMax,AmpMin){
	var Npixscan = CenterFreqTab.length
	var n = 0
	//Ramp-up phase (bias ramp) to avoid any saturation at FPA_Out due to the high raise at startup (I = U(high)/R(~0))
	print("Ramping-up")
	for(var i=0;i<Npixscan;i++){
		var Freq = FREQtab[i]
		var PhiIdeg = (Math.PI*i*i/Npixscan)*180/Math.PI											// apply the Schroeder's relation defined in eq (6.10) in page 163 of the Bible
		if(PhiIdeg >= 360) PhiIdeg = PhiIdeg-(360*parseInt(PhiIdeg/360))							// wrap PhiI in the range [0-360]
		Set_Pixel_Config(
		i,							// Pixel_ID --> +1 because the BBFB is "0" indexed for the moment
		-1,							// PHI_Delay (degree)
		0,							// Test_PHI_Rotate (degree)
		5,						// Gain_BBFB
		AmpMax,						// Bias_Amplitude
		Freq,						// Increment
		PhiIdeg						// Test_PHI_Initial (degree)
		)
	}
	Update_All_Configs(0)
	Apply_All_Configs(0)
	sendStartDREChannels(3)
	waitMs(1000)									// Wait for ramping up
	
	for(j=AmpMax; j>AmpMin; j--){
		for(var i=0;i<Npixscan;i++){
			var Freq = FREQtab[i]
			var PhiIdeg = (Math.PI*i*i/Npixscan)*180/Math.PI											// apply the Schroeder's relation defined in eq (6.10) in page 163 of the Bible
			if(PhiIdeg >= 360) PhiIdeg = PhiIdeg-(360*parseInt(PhiIdeg/360))							// wrap PhiI in the range [0-360]
			Set_Pixel_Config(
			i,							// Pixel_ID --> +1 because the BBFB is "0" indexed for the moment
			-1,							// PHI_Delay (degree)
			0,							// Test_PHI_Rotate (degree)
			5,						// Gain_BBFB
			j,							// Bias_Amplitude
			Freq,						// Increment
			PhiIdeg						// Test_PHI_Initial (degree)
			)
		}
		Update_All_Configs(0)
		Apply_All_Configs(0)
		var filename = (("000000" +(n).toString()).slice(-6)) + "_" + (j).toString()+ "AMP_" + "_FPAIVscan.dat"
		sendStopDREDaqAcquisition()							// To ensure that buffers are empty
		sendStartDREDaqAcquisition(8)
		sendStartDumpedDataBackup2Filename(10,filename,filename)
		waitMs(10)
		n+=1
	}
}

//----------------------------------------------------------------------------------------------------------------------------
function START_DUMP(dump_type,i,channelID,filename_comment){
	//This function starts a data dump in a specific acquisition mode (Starts the BBFB, starts the data acquisition).
	// Input parameters:
	//		dump_type (string)
	//			IN--NL		corresponds to a dump of the INPUT signal Before and After the non linear module
	//			IN-BIA		corresponds to a dump of the INPUT and BIAS raw data
	//			IN-FBK		corresponds to a dump of the INPUT and FEEDBACK raw data
	//			IQ-TST		corresponds to a dump of the internal test pixel data (i.e. clocked at 20Msps)
	//			IQ-ALL		corresponds to a dump of the output science data (i.e. all the science pixels sampled at 156 ksps)
	//			COUNTR		corresponds to a dump of the internal test counter data
	//		i (number)
	//			dump index that is included in the data file name
	//		channelID (number)
	//			Reference of the channel (0 or 1)
	//		filename_comment (string)
	// 			Extension to be used in the filename
	
	DUMP_MODE = 0
	error = false
	switch(dump_type){
		case "IN--NL":
			print("    > Starting dump of NL--IN data")
			if(channelID==0) DUMP_MODE = 0
			else DUMP_MODE = 4
			break
		case "IN-BIA":
			print("    > Starting dump of NL-FBK data")
			if(channelID==0) DUMP_MODE = 1
			else DUMP_MODE = 5
			break
		case "IN-FBK":
			print("    > Starting dump of BI-FBK data")
			if(channelID==0) DUMP_MODE = 2
			else DUMP_MODE = 6
			break
		case "IQ-TST":
			print("    > Starting dump of IQ-TST data")
			if(channelID==0) DUMP_MODE = 9
			else DUMP_MODE = 10
			break
		case "IQ-ALL":
			print("    > Starting dump of IQ-ALL data")
			DUMP_MODE = 8
			break
		case "COUNTR":
			print("    > Starting dump of COUNTR data")
			DUMP_MODE = 15
			break
		default:
			print("    > dump_type error")
			error = true
			break
		}
	if((channelID==0 || channelID==1) && error==false){
		waitingForDDR3Empty()
		sendOKResetDaqFifo()
		
		sendStartDumpedDataBackup2Filename(0, maDate()+"_"+(("0000" +(i).toString()).slice(-4))+"_"+dump_type+filename_comment+".dat","")
		sendStartDREDaqAcquisition(DUMP_MODE)
		//print(dump_type," DUMP File acquisition: ", i)
	}
}

//----------------------------------------------------------------------------------------------------------------------------
function STOP_DUMP(){
	// This function stops a dump data acquisition (No parameters)
	sendStopDumpedDataBackup()
	sendStopDREDaqAcquisition()
}

////////////////////////////////////////////// GENERIC TOOLS /////////////////////////////////////

function maDate()
// Returns the date using the format : yearmonthday_hourminutesecond
{
	var d = new Date();
	var Now_date = d.getFullYear()+(("00" +(d.getMonth()+1).toString()).slice(-2))+(("00" +(d.getDate()).toString()).slice(-2))+"_"+(("00" +(d.getHours()).toString()).slice(-2))+(("00" +(d.getMinutes()).toString()).slice(-2))+(("00" +(d.getSeconds()).toString()).slice(-2))
	return Now_date
}

const __MemorizedParameters = ""

//---------------------------------------------------------------------------------------------------------------------------------------
function setAndMemorize(string,value)
{
	__MemorizedParameters = __MemorizedParameters + string+"="+value+"\n"
}

//---------------------------------------------------------------------------------------------------------------------------------------
function saveMemorizedParametersToBackupDir(filename)
{
	saveStringToBackupDir(__MemorizedParameters,filename)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function saveStringToBackupDir(filecontent,filename)
{
	saveFileContent("temp.txt")
	clearFileContent()
	addToFile(filecontent)
	getLatestValue("DISP_BackupsCurrentDirectory")
	saveFileContent(DISP_BackupsCurrentDirectory + "\\" + filename)
	loadFileContent("temp.txt")
	deleteFile("temp.txt")
}

//---------------------------------------------------------------------------------------------------------------------------------------
function saveLogToBackupDir(destFilename)
{
	getLatestValue("DISP_BackupsCurrentDirectory")
	saveLogContent(DISP_BackupsCurrentDirectory + "\\" + destFilename)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function copyFileToBackupDir(filename,destFilename)
{
	var filename = (typeof filename !== 'undefined') ? filename : __FILE__;
	getLatestValue("DISP_BackupsCurrentDirectory")
	copyFile(filename,DISP_BackupsCurrentDirectory+"\\"+destFilename)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function copyDirToBackupDir(sourceDir,subdir)
{
	getLatestValue("DISP_BackupsCurrentDirectory")
	cmdLine = "xcopy "+sourceDir.replace("/","\\")+ " "+DISP_BackupsCurrentDirectory+subdir+"\\ /E /Y"
	exec(cmdLine)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function copyDirToBackupDirAndExecuteBat(sourceDir,subdir, batFile)
{
	getLatestValue("DISP_BackupsCurrentDirectory")
	cmdLine = "xcopy "+sourceDir.replace("/","\\")+ " "+DISP_BackupsCurrentDirectory+subdir+"\\ /E /Y"
	exec(cmdLine)
	return execute(DISP_BackupsCurrentDirectory+subdir+"\\"+batFile,DISP_BackupsCurrentDirectory+subdir,500000)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function zipData()
{
	getLatestValue("DISP_BackupsCurrentDirectory")
	exec(getEGSEDirectory()+"\\rar.exe m -ep "+DISP_BackupsCurrentDirectory+"\\DATA\\data.rar "+DISP_BackupsCurrentDirectory+"\\DATA\\*.dat")
}

//---------------------------------------------------------------------------------------------------------------------------------------
function sendPulsesAndWaitingForInjectionDone(Channel_id, nbPulses, pulsesFreq, ModulationRatio,TimeScale)
{
	print("  - injecting ",nbPulses,"pulses at ",pulsesFreq+" Hz....")
	sendStartDREPulses(Channel_id,nbPulses,pulsesFreq,ModulationRatio,TimeScale)
	req = getNextValue("DRE_NbPulsesInjected,DRE_NbPulsesCommanded","toutes les 1000 ms");
	waitingForNextValue(req)
	while(DRE_NbPulsesInjected != DRE_NbPulsesCommanded)
		waitingForNextValue(req)
	
	abortOneRequest(req)
	print("  - injection done")
}
//---------------------------------------------------------------------------------------------------------------------------------------

function sendPulsesAndWaitingForTimeout(Channel_id,pulsesFreq,durationMs, pulsesAmpl,TimeScale)
{
	if (pulsesAmpl === undefined)
		pulsesAmpl = 97
	nbPulses = 0xFFFFFFF
	print("  - injecting pulses at ",pulsesFreq+" Hz....")
	sendStartDREPulses(Channel_id,nbPulses,pulsesFreq,pulsesAmpl,TimeScale)
	startDate = new Date()
	endDate = new Date()
	endDate.setTime(startDate.getTime() + durationMs)
	
	while(new Date() < endDate)
		waitMs(1000)
	
	sendStopDREPulses()
	print("  - injection done")
}

//---------------------------------------------------------------------------------------------------------------------------------------
function waitingForDDR3Empty()
{
	var req = getNextValue("OK_DDR3Occupation","toutes les 10 ms");
	
	do
	{
		waitingForNextValue(req)
		//print(OK_DDR3Occupation)
	}while(OK_DDR3Occupation > 0)
		abortOneRequest(req)
}

//---------------------------------------------------------------------------------------------------------------------------------------
function firmware_valid(version, version_limit) {
	return (version>=parseInt(version_limit,16))
}

//---------------------------------------------------------------------------------------------------------------------------------------
function load_pulse(pixel_type) {

	getLatestValue("DRE_FirmwareId")
	if (firmware_valid(DRE_FirmwareId, "21C"))
		{
		path=".\\pulses\\"
		switch (pixel_type) 
			{
			case "CBE":
				filename = "fake_pulse_CBE.txt"
				break
			case "banc":
				filename = "fake_pulse_banc.txt"
				break
			case "delock":
				filename = "fake_pulse_fast_rise.txt"
				break
			default:
				filename = "fake_pulse_empty.txt"
			}
		print(">>---------------------------------------------------------")
		print(">>  Loading pulse shape into the firmware")

		print("  - Loading values from file " + filename + "...")
		txt = readTextFile(path+filename)
		BRAM_base_address = 0x00AF // 175
		timescale = parseInt(txt[0],10)
		values = new Array()

		print("  - Sending values to the firmware...")
		configureAckTimeout(0)  // Supprime l'attente d'acknowledge entre le script et le dispatcher pour etre plus raide
		for (index = 0; index < txt.length;++index)
		{
			values[index] = parseInt(txt[index+1],16) // <<<<<<==========<<<<===== CHRISTOPHE CHANGE LE 16 EN 10 SI C EN DECIMAL
			sendConfigureDREOneRegister(BRAM_base_address + index, values[index])
		}
		//plot(values)
		configureAckTimeout(5000) // Reactivation de l'acknowledge
		print("  - Done!")
	} else 
	{
		print("  Warning! This firmware does not allow to update the pulse shape.")
		timescale=1
	}
	return timescale
}

//---------------------------------------------------------------------------------------------------------------------------------------
function set_pixels_gain(gain)
{
	for(i=0;i<Npix;i++)
	{
		Set_Pixel_Config(
			Pixel_ID=i,
			PHI_Delay=-1,
			PHI_Rotate=-1,
			Gain_BBFB=gain,
			Bias_Amplitude=-1,
			Frequency=-1,
			PHI_Initial=-1
			)	
	}
}

//---------------------------------------------------------------------------------------------------------------------------------------

function waitingForEndOfRecord()
{
	var recordReq = getNextValue("DISP_currentRecordBackupSize,DISP_commandedBackupRecordSize","toutes les 1000 ms");
	do{
		waitingForNextValue(recordReq)
	}while (DISP_currentRecordBackupSize != DISP_commandedBackupRecordSize)
	abortOneRequest(recordReq)
}

//---------------------------------------------------------------------------------------------------------------------------------------

function maxi(m)
{
   var nb = maxi.arguments;
   for(var i=1; i<nb.length; i++)
      if(nb[i] > m)
         m = nb[i];
   return m;
}
//---------------------------------------------------------------------------------------------------------------------------------------

function mini(m)
{
   var nb = mini.arguments;
   for(var i=1; i<nb.length; i++)
      if(nb[i] < m)
         m = nb[i];
   return m;
}

//---------------------------------------------------------------------------------------------------------------------------------------

