include("F:/Shared/04_GSE_XIFU-STUDIO/00_SCRIPTS/DRE_Tools_REFERENCE.dscript")

// Constants ///////////////////////////////////////////////////////////////////
const Default_amp    = 45
const test_pix_index   = 30
const amp_pixel_test = Default_amp
const SQUID_interne = 0
const AMPMAX_int    = 10
const AMPMAX_ext    = 5
const AMPMIN        = 0
const AMPSTEP    = 1

const Gain         = 57
const Npix         = 40

const nbr_spectra = 40 // Nbr of spectra files to be measured and accumulated
const spectra_duration_ms = 1000 // Duration of each spectrum to be measured and accumulated

const ER_noise_duration_ms = 2000
const ER_nbr_pulses_caract = 1000
const ER_nbr_pulses_meas = 2000

////////////////////////////////////////////////////////////////////////////////
// Pixel's frequencies
////////////////////////////////////////////////////////////////////////////////
// Definition of the firmware frequency grid
//const Fgrid=FS/Math.pow(2,18) // 74.5 Hz
//const Fgrid=FS/Math.pow(2,15) // 596 Hz
const Fgrid=FS/Math.pow(2,13) // 2 384 Hz

// Definition of LC resonance frequencies: 100kHz step and 2kHz 1 sigma dispersion
var FREQtab = [998485.09,1101735.55,1206050.82,1299635.69,1396921.32,1497400.84,1597443.42,1697100.71,
                1798494.57,1901653.20,1999933.31,2102524.25,2201501.26,2302357.52,2396908.98,2499812.87,
                2598318.18,2698010.84,2799882.31,2898747.33,2999135.35,3099615.29,3199896.62,3301537.17,
                3399513.29,3503357.74,3601831.79,3701608.80,3803299.15,3903022.82,3995977.57,4101638.73,
                4200495.76,4301488.89,4400900.08,4500089.63,4604005.49,4700367.83,4800293.09,4899464.96]
for(i=0;i<Npix;i++){            // This loop aligns the firmware frequencies on a frequency grid
    FREQtab[i] = Fgrid*(Math.ceil(FREQtab[i]/Fgrid))
}

////////////////////////////////////////////////////////////////////////////////
// Test sequence
////////////////////////////////////////////////////////////////////////////////

// Stopping every hypothetic readout...
stop_in_case_of()

// Cleaning working directory
clear_XIFUstudio_dat_files()    // Delete all *.dat files inside the Xifustudio folder 

// Resetting the DEMUX firmware
DRE_resetAll()
Send_All(0)

// Configuration of the DEMUX firmware (channels)
configure_DEMUX_channels(test_pix_index)

// Measurement of gain bandwidth product
ScanGBW(Default_amp, Gain, FREQtab[test_pix_index])     // (bias_Amp, BBFB_gain, central_freq)  

// Configuration of the DEMUX firmware (pixels)
configure_DEMUX_pixels(test_pix_index)

// Measurement of housekeepings
get_HK()

//  Start DEMUX 
sendStartDREChannels(3)
waitMs(1000)            // Wait for the ramp

// Measurement of the data dumps
mk_dumps(1000)

// Measurement of IQ files for spectra characterisation
mk_science_data_files(nbr_spectra, spectra_duration_ms)

// Measurement of energy resolution
alert("Energy resolution measurement")
mk_energy_resol_tst(ER_noise_duration_ms, ER_nbr_pulses_caract, ER_nbr_pulses_meas)

stop_HK()
alert("End of tests")


////////////////////////////////////////////////////////////////////////////////
// Functions definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
function configure_DEMUX_channels()
// This function configures the channels parameters of the DEMUX firmware
{
	//// Channel settings
	Channel_CMD(
            0,                                        // Channel_id
            0,                                        // Loop_Control
            0,                                        // StartStop (don't touch, always STOP)
            1,                                        // ADC_ON
            1,                                        // DACB_ON
            1,                                        // DACF_ON
            SQUID_interne,                            // Select_Input
            1,                                        // Bias_Enabled
            1,                                        // Feedback_Enabled
            2,                                        // Bias_Slope_Speed
            3,                                        // Bias_Truncation
            3,                                        // Feedback_Truncation
            32767,                                    // Compensation_Gain (32767 => unitary gain)
            0                                        // Feedback_Reverse
	)
}

////////////////////////////////////////////////////////////////////////////////
function configure_DEMUX_pixels(test_pix_index)
// This function configures the pixels' parameters of the DEMUX firmware for the test
// In this configuration 39 standard pixels and the test pixel are used.
// Input parameters:
//		test_pix_index: (number)
//			the index of the standard pixel to be replaced by the test pixel
{
	var Amp=Default_amp  // Default value in the case of analog SQUID simulator
	for(var i=0;i<Npix;i++)
	{
		var Freq = FREQtab[i]
		var PhiIdeg = (Math.PI*i*i/Npix)*180/Math.PI                            // apply the Schroeder's minus relation defined in eq (6.10) in page 163 of the Bible
		if(PhiIdeg >= 360) PhiIdeg = PhiIdeg-(360*parseInt(PhiIdeg/360))        // wrap PhiI in the range [0-360]
		New_DRE_Pixel_CMD(
                i,                            // Pixel_ID
                -1,                            // PHI_Delay (degree) (Phi_C)
                0,                            // Test_PHI_Rotate (degree)
                Gain,                        // Gain_BBFB
                Amp,                        // Bias_Amplitude
                Freq,                        // Increment
                PhiIdeg                        // Test_PHI_Initial (degree)
		)
	}

	// Switch off the pixel where we will place the test pixel ("id_pixel_test"-th pixel)
	New_DRE_Pixel_CMD(
                test_pix_index,                // Pixel_ID
                -1,                            // PHI_Delay (degree) (Phi_C)
                0,                            // Test_PHI_Rotate (degree)
                Gain,                        // Gain_BBFB
                0,                            // Bias_Amplitude
                Freq,                        // Increment
                PhiIdeg                        // Test_PHI_Initial (degree)
		)
	Update_AllConfigs(0)
	Send_All(0)

	//// Test pixel's settings
	var Freq_Test = FREQtab[test_pix_index]
	var PhiIdeg = (Math.PI*test_pix_index*test_pix_index/Npix)*180/Math.PI                     // apply the Schroeder's minus relation defined in eq (6.10) in page 163 of the Bible
	if(PhiIdeg >= 360) PhiIdeg = PhiIdeg-(360*parseInt(PhiIdeg/360))                            // wrap PhiI in the range [0-360]
	getLatestValue("SCANFB_outputCoeffs")                // Request  the ScanFB coef to the GSE
	var PhiC_Test = SCANFB_outputCoeffs[0]+SCANFB_outputCoeffs[1]*Math.pow(Freq_Test,1)+SCANFB_outputCoeffs[2]*Math.pow(Freq_Test,2)+SCANFB_outputCoeffs[3]*Math.pow(Freq_Test,3)
	var PhiC_Testdeg = -PhiC_Test + 180                                                    // apply the Antoine's relation defined in eq. (6.8) in page 158 of the Bible
	if(PhiC_Testdeg >= 360) PhiC_Testdeg = PhiC_Testdeg-(360*parseInt(Math.abs(PhiC_Testdeg)/360))            // wrap PhiC in the range [0-360]
	if(PhiC_Testdeg <= 0) PhiC_Testdeg = PhiC_Testdeg+(360*parseInt(1+Math.abs(PhiC_Testdeg)/360))            // wrap PhiC in the range [0-360]
	DRE_Test_Pixel_CMD(
                Math.round(PhiC_Testdeg*Math.pow(2,8)/360),                // Test_PHI_Delay (degree)
                Math.round(0*Math.pow(2,8)/360),                        // Test_PHI_Rotate (degree)
                Math.round(PhiIdeg*Math.pow(2,12)/360),                    // Test_PHI_Initial (degree)
                Gain,                                                    // Test_Gain_BBFB
                amp_pixel_test,                                                    // Test_Bias_Amplitude
                Math.round(Freq_Test*Math.pow(2,20)/FS),                // Test_Frequency (Hz)
                Math.round(0*Math.pow(2,24)/FS),                        // Test_Bias_Modulation_Frequency (Hz)
                0,                                                        // Test_Bias_Modulation_Amplitude (necessarily lower than "Test_Bias_Amplitude")
                0,                                                        // SW2
                0                                                        // SW1
	)
}

////////////////////////////////////////////////////////////////////////////////
function get_HK()
{
	var dump_type = "HK"

	sendStartBackup(2,dump_type+"_DUMP_CONF","no_comment")
	waitMs(100)
	sendStartDREHkAcquisition(1)	// HK configuration (1)
	waitMs(100)
	sendStopDREHkAcquisition()
	sendStopBackup(2)					// 0 : ne fait rien	// 1 : ???		// 2 : HK

	sendStartBackup(2,dump_type+"_DUMP_HK","no_comment")
	waitMs(100)
	sendStartDREHkAcquisition(2)	// periodic HK from ADC (to be stopped at the end of the sequence)
}

////////////////////////////////////////////////////////////////////////////////
function stop_in_case_of()
{
	sendStopDREHkAcquisition()
	sendStopBackup(2)					// 0 : ne fait rien	// 1 : ???		// 2 : HK
	sendStopDREChannels(3)
}

////////////////////////////////////////////////////////////////////////////////
function stop_HK()
{
	sendStopDREHkAcquisition()
	sendStopDumpedDataBackup()
	sendStopBackup(2)
}

////////////////////////////////////////////////////////////////////////////////
function mk_dumps(duration_ms)
// This function makes BIAS, INPUT and FEEDBACK dumps
// Input parameters:
//		duration_ms: number
//			duration of each dump
{
	print("==> Measurement of BIAS, FEEDBACK and ERROR dumps files:")
	START_DUMP("IN-BIA" ,0,0,"")
	waitMs(duration_ms)
	STOP_DUMP()

	START_DUMP("IN-FBK",0,0,"")
	waitMs(duration_ms)
	STOP_DUMP()
}

////////////////////////////////////////////////////////////////////////////////
function mk_science_data_files(nbr_files, duration_ms)
// This function makes a series of science data files in order to measure the science data spectra
// Input parameters:
//		duration_ms: (number)
//			duration of each dump
//		nbr_spectra: (number)
//			the number of files to measure
{
	print("==> Measurement of IQ data files for spectra measurement:")
	for(i=0;i<nbr_files;i++){
		START_DUMP("IQ-ALL",i,0,"_Science-Data")        // ( dump_type, i, channelID, filename_comment ) 
		waitMs(duration_ms)
		STOP_DUMP()
	}	
}

////////////////////////////////////////////////////////////////////////////////
function mk_energy_resol_tst(noise_duration_ms, Npulses_caract, Npulses_meas)
// This function makes the measurements necessary to estimate the energy resolution
{
	print("==>  Measurement of energy resolution:")
	print("  - NOISE characterisation:")
	START_DUMP("IQ-ALL",0,0,"_ER-Noise-Charact")            // ( dump_type, i, channelID, filename_comment )  
	waitMs(noise_duration_ms)
	STOP_DUMP()

	print("  - PULSE characterisation:")
	START_DUMP("IQ-ALL",0,0,"_ER-Pulse-Charact@7keV")            // ( dump_type, i, channelID, filename_comment )  
	waitMs(10)
	var Send_Pulse     = 0;
	for(var i=0;i<Npulses_caract;i++){
		if (Send_Pulse == 0){
			Send_Pulse = 1;
			var Pulse_timescale     = 1;
			var Pulse_Amplitude     = 97;            // corresponds to ~38% modulation depth from P. Peille pulse signal 
			SendPulse(Pulse_timescale, Pulse_Amplitude, Send_Pulse)
			Send_Pulse = 0
			SendPulse(Pulse_timescale, Pulse_Amplitude, Send_Pulse)
		}
		else Send_Pulse = 0
	}
	STOP_DUMP()

	print("  - PULSE Measurements: ")
	var Send_Pulse     = 0;
	START_DUMP("IQ-ALL",0,0,"_ER-Observation")            // ( dump_type, duration(ms), i, channelID, filename_comment )   
	for(var i=0;i<Npulses_meas;i++){
		if (Send_Pulse == 0){
			Send_Pulse = 1;
			var Pulse_timescale     = 1;
			var Pulse_Amplitude     = 97;                // corresponds to ~38% modulation depth from P. Peille pulse signal 
			SendPulse(Pulse_timescale, Pulse_Amplitude, Send_Pulse)
			Send_Pulse = 0
			SendPulse(Pulse_timescale, Pulse_Amplitude, Send_Pulse)
		}
		else Send_Pulse = 0
	}
	STOP_DUMP()
}
////////////////////////////////////////////////////////////////////////////////


